# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _BniHardwareWrapper
else:
    import _BniHardwareWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _BniHardwareWrapper.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BniHardwareWrapper.delete_SwigPyIterator

    def value(self):
        return _BniHardwareWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BniHardwareWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BniHardwareWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BniHardwareWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BniHardwareWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BniHardwareWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _BniHardwareWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _BniHardwareWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _BniHardwareWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BniHardwareWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BniHardwareWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BniHardwareWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BniHardwareWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BniHardwareWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BniHardwareWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BniHardwareWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BniHardwareWrapper:
_BniHardwareWrapper.SwigPyIterator_swigregister(SwigPyIterator)

class Device(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BniHardwareWrapper.Device_swiginit(self, _BniHardwareWrapper.new_Device(*args))
    __swig_destroy__ = _BniHardwareWrapper.delete_Device

    def disconnect(self):
        return _BniHardwareWrapper.Device_disconnect(self)

    def isConnected(self):
        return _BniHardwareWrapper.Device_isConnected(self)

    def getProductName(self):
        return _BniHardwareWrapper.Device_getProductName(self)

    def getVendorName(self):
        return _BniHardwareWrapper.Device_getVendorName(self)

    def getVersion(self):
        return _BniHardwareWrapper.Device_getVersion(self)

    def write(self, address, dataIn, fixedAddress):
        return _BniHardwareWrapper.Device_write(self, address, dataIn, fixedAddress)

    def read(self, address, dataOut, fixedAddress):
        return _BniHardwareWrapper.Device_read(self, address, dataOut, fixedAddress)

    def wrap(self, device):
        return _BniHardwareWrapper.Device_wrap(self, device)

    def wrapDevice(self, d):
        return _BniHardwareWrapper.Device_wrapDevice(self, d)

    def deviceId(self, d):
        return _BniHardwareWrapper.Device_deviceId(self, d)

# Register Device in _BniHardwareWrapper:
_BniHardwareWrapper.Device_swigregister(Device)

class BniProbe(Device):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ProbeState_Unknown = _BniHardwareWrapper.BniProbe_ProbeState_Unknown
    ProbeState_Error = _BniHardwareWrapper.BniProbe_ProbeState_Error
    ProbeState_Off = _BniHardwareWrapper.BniProbe_ProbeState_Off
    ProbeState_Sleep = _BniHardwareWrapper.BniProbe_ProbeState_Sleep
    ProbeState_PowerSave = _BniHardwareWrapper.BniProbe_ProbeState_PowerSave
    ProbeState_Standby = _BniHardwareWrapper.BniProbe_ProbeState_Standby
    ProbeState_Operational = _BniHardwareWrapper.BniProbe_ProbeState_Operational
    ProbeState_Operational_HV = _BniHardwareWrapper.BniProbe_ProbeState_Operational_HV
    __swig_destroy__ = _BniHardwareWrapper.delete_BniProbe

    def initialize(self, forceChipJtagId=0, skipChipInitEnabled=False, disableInterposerTemperatureLoop=False):
        return _BniHardwareWrapper.BniProbe_initialize(self, forceChipJtagId, skipChipInitEnabled, disableInterposerTemperatureLoop)

    def resetFpga(self):
        return _BniHardwareWrapper.BniProbe_resetFpga(self)

    def reconfigureFpga(self):
        return _BniHardwareWrapper.BniProbe_reconfigureFpga(self)

    def startReceive(self, buffer):
        return _BniHardwareWrapper.BniProbe_startReceive(self, buffer)

    def isReceiving(self):
        return _BniHardwareWrapper.BniProbe_isReceiving(self)

    def stopReceive(self):
        return _BniHardwareWrapper.BniProbe_stopReceive(self)

    def rawRead(self, dataOut):
        return _BniHardwareWrapper.BniProbe_rawRead(self, dataOut)

    def rawStreamRead(self, dataOut):
        return _BniHardwareWrapper.BniProbe_rawStreamRead(self, dataOut)

    def getProbeStatusId(self, regId, response=None):
        return _BniHardwareWrapper.BniProbe_getProbeStatusId(self, regId, response)

    def setConfigurationId(self, configId):
        return _BniHardwareWrapper.BniProbe_setConfigurationId(self, configId)

    def readSetConfigurationIdResponse(self, configId):
        return _BniHardwareWrapper.BniProbe_readSetConfigurationIdResponse(self, configId)

    def getConfigurationId(self, configIds):
        return _BniHardwareWrapper.BniProbe_getConfigurationId(self, configIds)

    def writePoseidon(self, topbot, module, addressGroup, data):
        return _BniHardwareWrapper.BniProbe_writePoseidon(self, topbot, module, addressGroup, data)

    def readPoseidon(self, topbot, module, addressGroup, num16BitWords):
        return _BniHardwareWrapper.BniProbe_readPoseidon(self, topbot, module, addressGroup, num16BitWords)

    def setProbeState(self, state):
        return _BniHardwareWrapper.BniProbe_setProbeState(self, state)

    def getProbeState(self):
        return _BniHardwareWrapper.BniProbe_getProbeState(self)

    def getTransducerVersion(self):
        return _BniHardwareWrapper.BniProbe_getTransducerVersion(self)

    def getAssemblyVersion(self):
        return _BniHardwareWrapper.BniProbe_getAssemblyVersion(self)

    def getAssemblySerialNumber(self):
        return _BniHardwareWrapper.BniProbe_getAssemblySerialNumber(self)

    def setAssemblyVersion(self, assemblyVersion):
        return _BniHardwareWrapper.BniProbe_setAssemblyVersion(self, assemblyVersion)

    def setAssemblySerialNumber(self, serialNumber):
        return _BniHardwareWrapper.BniProbe_setAssemblySerialNumber(self, serialNumber)

    def setUdiDiNumber(self, diNumber):
        return _BniHardwareWrapper.BniProbe_setUdiDiNumber(self, diNumber)

    def getUdiDiNumber(self):
        return _BniHardwareWrapper.BniProbe_getUdiDiNumber(self)

    def getUdiDiDisplay(self):
        return _BniHardwareWrapper.BniProbe_getUdiDiDisplay(self)

    def getUdiPiNumber(self):
        return _BniHardwareWrapper.BniProbe_getUdiPiNumber(self)

    def getUdiPiDisplay(self):
        return _BniHardwareWrapper.BniProbe_getUdiPiDisplay(self)

    def getUdi(self):
        return _BniHardwareWrapper.BniProbe_getUdi(self)

    def isHeartbeatEnabled(self):
        return _BniHardwareWrapper.BniProbe_isHeartbeatEnabled(self)

    def setHeartbeatEnabled(self, enabled):
        return _BniHardwareWrapper.BniProbe_setHeartbeatEnabled(self, enabled)

    def testEInk(self):
        return _BniHardwareWrapper.BniProbe_testEInk(self)

    def enableQuickCharge(self):
        return _BniHardwareWrapper.BniProbe_enableQuickCharge(self)

    def getPowerInterface(self):
        return _BniHardwareWrapper.BniProbe_getPowerInterface(self)

    def getPowerProfileInterface(self):
        return _BniHardwareWrapper.BniProbe_getPowerProfileInterface(self)

    def getSequencer(self):
        return _BniHardwareWrapper.BniProbe_getSequencer(self)

    def __init__(self, *args):
        _BniHardwareWrapper.BniProbe_swiginit(self, _BniHardwareWrapper.new_BniProbe(*args))

# Register BniProbe in _BniHardwareWrapper:
_BniHardwareWrapper.BniProbe_swigregister(BniProbe)

class BniProbeDiag(BniProbe):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _BniHardwareWrapper.delete_BniProbeDiag

    def memoryTest(self, address, memSize, blockSize):
        return _BniHardwareWrapper.BniProbeDiag_memoryTest(self, address, memSize, blockSize)

    def updateFirmware(self, repo, force=False):
        return _BniHardwareWrapper.BniProbeDiag_updateFirmware(self, repo, force)

    def firmwareErase(self):
        return _BniHardwareWrapper.BniProbeDiag_firmwareErase(self)

    def getNiosDebugLog(self):
        return _BniHardwareWrapper.BniProbeDiag_getNiosDebugLog(self)

    def testFpgaFlash(self):
        return _BniHardwareWrapper.BniProbeDiag_testFpgaFlash(self)

    def testFx3Eeprom(self):
        return _BniHardwareWrapper.BniProbeDiag_testFx3Eeprom(self)

    def testPllAccess(self):
        return _BniHardwareWrapper.BniProbeDiag_testPllAccess(self)

    def testPllInterrupt(self):
        return _BniHardwareWrapper.BniProbeDiag_testPllInterrupt(self)

    def readInterposerTemperature(self):
        return _BniHardwareWrapper.BniProbeDiag_readInterposerTemperature(self)

    def readPcmMessage(self, half, module, addressGroup, num16BitWords):
        return _BniHardwareWrapper.BniProbeDiag_readPcmMessage(self, half, module, addressGroup, num16BitWords)

    def writePcmMessage(self, half, module, addressGroup, num16BitWords, payload):
        return _BniHardwareWrapper.BniProbeDiag_writePcmMessage(self, half, module, addressGroup, num16BitWords, payload)

    def sendSpecialFunction(self, *args):
        return _BniHardwareWrapper.BniProbeDiag_sendSpecialFunction(self, *args)

    def getPcmPacket(self, half, data):
        return _BniHardwareWrapper.BniProbeDiag_getPcmPacket(self, half, data)

    def writePcmPacket(self, half, data, dataLength, launchTime=0):
        return _BniHardwareWrapper.BniProbeDiag_writePcmPacket(self, half, data, dataLength, launchTime)

    def writePcmRegister(self, half, offset, value):
        return _BniHardwareWrapper.BniProbeDiag_writePcmRegister(self, half, offset, value)

    def writeUmapRegister(self, baseAddress, offset, value):
        return _BniHardwareWrapper.BniProbeDiag_writeUmapRegister(self, baseAddress, offset, value)

    def readPcmRegister(self, half, offset):
        return _BniHardwareWrapper.BniProbeDiag_readPcmRegister(self, half, offset)

    def readUmapRegister(self, baseAddress, offset):
        return _BniHardwareWrapper.BniProbeDiag_readUmapRegister(self, baseAddress, offset)

    def getBoardComponentNumber(self):
        return _BniHardwareWrapper.BniProbeDiag_getBoardComponentNumber(self)

    def getBoardNumber(self):
        return _BniHardwareWrapper.BniProbeDiag_getBoardNumber(self)

    def getBoardRevision(self):
        return _BniHardwareWrapper.BniProbeDiag_getBoardRevision(self)

    def getBoardBomNumber(self):
        return _BniHardwareWrapper.BniProbeDiag_getBoardBomNumber(self)

    def getBoardSerialNumber(self):
        return _BniHardwareWrapper.BniProbeDiag_getBoardSerialNumber(self)

    def getBatteryCapacity(self, isDefault):
        return _BniHardwareWrapper.BniProbeDiag_getBatteryCapacity(self, isDefault)

    def setBatteryCapacity(self, battCapacity):
        return _BniHardwareWrapper.BniProbeDiag_setBatteryCapacity(self, battCapacity)

    def readFPGATemperature(self):
        return _BniHardwareWrapper.BniProbeDiag_readFPGATemperature(self)

    def isPegasusBoard(self):
        return _BniHardwareWrapper.BniProbeDiag_isPegasusBoard(self)

    def i2cWriteByte(self, *args):
        return _BniHardwareWrapper.BniProbeDiag_i2cWriteByte(self, *args)

    def i2cWriteWord(self, *args):
        return _BniHardwareWrapper.BniProbeDiag_i2cWriteWord(self, *args)

    def i2cReadByte(self, *args):
        return _BniHardwareWrapper.BniProbeDiag_i2cReadByte(self, *args)

    def i2cReadWord(self, *args):
        return _BniHardwareWrapper.BniProbeDiag_i2cReadWord(self, *args)

    def i2cSendCommand(self, *args):
        return _BniHardwareWrapper.BniProbeDiag_i2cSendCommand(self, *args)

    def i2cReadBytesTransfer(self, bus, address, command, commandLength, dataOut):
        return _BniHardwareWrapper.BniProbeDiag_i2cReadBytesTransfer(self, bus, address, command, commandLength, dataOut)

    def i2cWriteBytesTransfer(self, bus, address, command, commandLength, dataIn):
        return _BniHardwareWrapper.BniProbeDiag_i2cWriteBytesTransfer(self, bus, address, command, commandLength, dataIn)

    def i2cFx3WriteBytesTransfer(self, isHighSpeed, address, command, commandLength, data):
        return _BniHardwareWrapper.BniProbeDiag_i2cFx3WriteBytesTransfer(self, isHighSpeed, address, command, commandLength, data)

    def i2cFx3ReadBytesTransfer(self, isHighSpeed, address, command, commandLength, dataLength, data):
        return _BniHardwareWrapper.BniProbeDiag_i2cFx3ReadBytesTransfer(self, isHighSpeed, address, command, commandLength, dataLength, data)

    def requestPatternGeneratorData(self, numBytes):
        return _BniHardwareWrapper.BniProbeDiag_requestPatternGeneratorData(self, numBytes)

    def IMU_start(self, useDMP):
        return _BniHardwareWrapper.BniProbeDiag_IMU_start(self, useDMP)

    def IMU_getRawData(self):
        return _BniHardwareWrapper.BniProbeDiag_IMU_getRawData(self)

    def IMU_getDmpData(self):
        return _BniHardwareWrapper.BniProbeDiag_IMU_getDmpData(self)

    def getJtagIdCode(self):
        return _BniHardwareWrapper.BniProbeDiag_getJtagIdCode(self)

    def testBoardIC(self, icId, feature):
        return _BniHardwareWrapper.BniProbeDiag_testBoardIC(self, icId, feature)

    def getCalibrationData(self):
        return _BniHardwareWrapper.BniProbeDiag_getCalibrationData(self)

    def writeCalibrationData(self, dataIn):
        return _BniHardwareWrapper.BniProbeDiag_writeCalibrationData(self, dataIn)

    def setDoubleTap(self, enableDoubleTap, doubleTapQuietTime, doubleTapLatency, doubleTapXThreshold, doubleTapYThreshold, doubleTapZThreshold):
        return _BniHardwareWrapper.BniProbeDiag_setDoubleTap(self, enableDoubleTap, doubleTapQuietTime, doubleTapLatency, doubleTapXThreshold, doubleTapYThreshold, doubleTapZThreshold)

    def __init__(self, *args):
        _BniHardwareWrapper.BniProbeDiag_swiginit(self, _BniHardwareWrapper.new_BniProbeDiag(*args))

# Register BniProbeDiag in _BniHardwareWrapper:
_BniHardwareWrapper.BniProbeDiag_swigregister(BniProbeDiag)
cvar = _BniHardwareWrapper.cvar
BniProbeDiag.Top = _BniHardwareWrapper.cvar.BniProbeDiag_Top
BniProbeDiag.Bottom = _BniHardwareWrapper.cvar.BniProbeDiag_Bottom
BniProbeDiag.Peripheral = _BniHardwareWrapper.cvar.BniProbeDiag_Peripheral
BniProbeDiag.Power = _BniHardwareWrapper.cvar.BniProbeDiag_Power
BniProbeDiag.High = _BniHardwareWrapper.cvar.BniProbeDiag_High
BniProbeDiag.Normal = _BniHardwareWrapper.cvar.BniProbeDiag_Normal

class BootloaderDevice(Device):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, device):
        _BniHardwareWrapper.BootloaderDevice_swiginit(self, _BniHardwareWrapper.new_BootloaderDevice(device))
    __swig_destroy__ = _BniHardwareWrapper.delete_BootloaderDevice

    def updateFirmware(self, repo, force=False):
        return _BniHardwareWrapper.BootloaderDevice_updateFirmware(self, repo, force)

    def eraseFirmware(self, type):
        return _BniHardwareWrapper.BootloaderDevice_eraseFirmware(self, type)

    def rebootDevice(self, reloadFirmware):
        return _BniHardwareWrapper.BootloaderDevice_rebootDevice(self, reloadFirmware)

    def getBatteryStatus(self):
        return _BniHardwareWrapper.BootloaderDevice_getBatteryStatus(self)

    def checkAndBootProductionImage(self):
        return _BniHardwareWrapper.BootloaderDevice_checkAndBootProductionImage(self)

    def getBoardRevision(self):
        return _BniHardwareWrapper.BootloaderDevice_getBoardRevision(self)

    def getBootloaderVersion(self):
        return _BniHardwareWrapper.BootloaderDevice_getBootloaderVersion(self)

    def getAssemblyVersion(self):
        return _BniHardwareWrapper.BootloaderDevice_getAssemblyVersion(self)

    def getAssemblySerialNumber(self):
        return _BniHardwareWrapper.BootloaderDevice_getAssemblySerialNumber(self)

    def getUdiDiNumber(self):
        return _BniHardwareWrapper.BootloaderDevice_getUdiDiNumber(self)

    def getUdiPiNumber(self):
        return _BniHardwareWrapper.BootloaderDevice_getUdiPiNumber(self)

    def getUdiDiDisplay(self):
        return _BniHardwareWrapper.BootloaderDevice_getUdiDiDisplay(self)

    def getUdiPiDisplay(self):
        return _BniHardwareWrapper.BootloaderDevice_getUdiPiDisplay(self)

    def getUdi(self):
        return _BniHardwareWrapper.BootloaderDevice_getUdi(self)

    def getImageCrc(self, type):
        return _BniHardwareWrapper.BootloaderDevice_getImageCrc(self, type)

    def hasGetCrcSupport(self):
        return _BniHardwareWrapper.BootloaderDevice_hasGetCrcSupport(self)

# Register BootloaderDevice in _BniHardwareWrapper:
_BniHardwareWrapper.BootloaderDevice_swigregister(BootloaderDevice)

class Fx3Device(Device):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _BniHardwareWrapper.delete_Fx3Device

    def rebootFx3(self, reloadFirmware):
        return _BniHardwareWrapper.Fx3Device_rebootFx3(self, reloadFirmware)

    def printTlvs(self):
        return _BniHardwareWrapper.Fx3Device_printTlvs(self)

    def readTlv(self, tlv):
        return _BniHardwareWrapper.Fx3Device_readTlv(self, tlv)

    def readRawTlv(self, tlv, buffer):
        return _BniHardwareWrapper.Fx3Device_readRawTlv(self, tlv, buffer)

    def setTlv(self, *args):
        return _BniHardwareWrapper.Fx3Device_setTlv(self, *args)

    def saveTlvs(self):
        return _BniHardwareWrapper.Fx3Device_saveTlvs(self)

    def getFx3Version(self):
        return _BniHardwareWrapper.Fx3Device_getFx3Version(self)

    def getImageCrc(self, firmwareType):
        return _BniHardwareWrapper.Fx3Device_getImageCrc(self, firmwareType)

    def resetFx3UmapEngine(self):
        return _BniHardwareWrapper.Fx3Device_resetFx3UmapEngine(self)

    def getFx3DebugLog(self):
        return _BniHardwareWrapper.Fx3Device_getFx3DebugLog(self)

    def setFx3Mode(self, mode):
        return _BniHardwareWrapper.Fx3Device_setFx3Mode(self, mode)

    def getFx3Mode(self):
        return _BniHardwareWrapper.Fx3Device_getFx3Mode(self)

    def getBatteryVoltage(self):
        return _BniHardwareWrapper.Fx3Device_getBatteryVoltage(self)

    def getBatteryCurrent(self):
        return _BniHardwareWrapper.Fx3Device_getBatteryCurrent(self)

    def getBatteryInstantaneousCurrent(self):
        return _BniHardwareWrapper.Fx3Device_getBatteryInstantaneousCurrent(self)

    def getBatteryTemperature(self):
        return _BniHardwareWrapper.Fx3Device_getBatteryTemperature(self)

    def getBatteryPercentage(self):
        return _BniHardwareWrapper.Fx3Device_getBatteryPercentage(self)

    def getBatteryCoulombCounter(self):
        return _BniHardwareWrapper.Fx3Device_getBatteryCoulombCounter(self)

    def setForceCharging(self, state):
        return _BniHardwareWrapper.Fx3Device_setForceCharging(self, state)

    def getChargingState(self):
        return _BniHardwareWrapper.Fx3Device_getChargingState(self)

    def getFx3BootloaderVersion(self):
        return _BniHardwareWrapper.Fx3Device_getFx3BootloaderVersion(self)

    def getEnabledSafetyFeatures(self):
        return _BniHardwareWrapper.Fx3Device_getEnabledSafetyFeatures(self)

    def getQiReceiverStatus(self):
        return _BniHardwareWrapper.Fx3Device_getQiReceiverStatus(self)

    def getUsb3ErrorCount(self):
        return _BniHardwareWrapper.Fx3Device_getUsb3ErrorCount(self)

    def getFx3PostStatus(self):
        return _BniHardwareWrapper.Fx3Device_getFx3PostStatus(self)

    def readRawAdcChannel(self, adc, adcConfig):
        return _BniHardwareWrapper.Fx3Device_readRawAdcChannel(self, adc, adcConfig)

    def readVoltsAdcChannel(self, adc, adcConfig):
        return _BniHardwareWrapper.Fx3Device_readVoltsAdcChannel(self, adc, adcConfig)

    def readTemperature(self, sensor):
        return _BniHardwareWrapper.Fx3Device_readTemperature(self, sensor)

    def configureSafetyFeatures(self, features):
        return _BniHardwareWrapper.Fx3Device_configureSafetyFeatures(self, features)

    def __init__(self, *args):
        _BniHardwareWrapper.Fx3Device_swiginit(self, _BniHardwareWrapper.new_Fx3Device(*args))

# Register Fx3Device in _BniHardwareWrapper:
_BniHardwareWrapper.Fx3Device_swigregister(Fx3Device)

class Fx3DfuDevice(Device):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, device):
        _BniHardwareWrapper.Fx3DfuDevice_swiginit(self, _BniHardwareWrapper.new_Fx3DfuDevice(device))
    __swig_destroy__ = _BniHardwareWrapper.delete_Fx3DfuDevice

    def loadFirmware(self, firmwareFile):
        return _BniHardwareWrapper.Fx3DfuDevice_loadFirmware(self, firmwareFile)

# Register Fx3DfuDevice in _BniHardwareWrapper:
_BniHardwareWrapper.Fx3DfuDevice_swigregister(Fx3DfuDevice)

class Core(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    LogSeverity_Trace = _BniHardwareWrapper.Core_LogSeverity_Trace
    LogSeverity_Debug = _BniHardwareWrapper.Core_LogSeverity_Debug
    LogSeverity_Info = _BniHardwareWrapper.Core_LogSeverity_Info
    LogSeverity_Warning = _BniHardwareWrapper.Core_LogSeverity_Warning
    LogSeverity_Error = _BniHardwareWrapper.Core_LogSeverity_Error
    LogSeverity_Critical = _BniHardwareWrapper.Core_LogSeverity_Critical

    @staticmethod
    def SetMinimumLoggedSeverity(severity):
        return _BniHardwareWrapper.Core_SetMinimumLoggedSeverity(severity)

    @staticmethod
    def Log(severity, file, line, msg):
        return _BniHardwareWrapper.Core_Log(severity, file, line, msg)

    @staticmethod
    def SetupLogging(d):
        return _BniHardwareWrapper.Core_SetupLogging(d)

    def __init__(self):
        _BniHardwareWrapper.Core_swiginit(self, _BniHardwareWrapper.new_Core())
    __swig_destroy__ = _BniHardwareWrapper.delete_Core

# Register Core in _BniHardwareWrapper:
_BniHardwareWrapper.Core_swigregister(Core)

def Core_SetMinimumLoggedSeverity(severity):
    return _BniHardwareWrapper.Core_SetMinimumLoggedSeverity(severity)

def Core_Log(severity, file, line, msg):
    return _BniHardwareWrapper.Core_Log(severity, file, line, msg)

def Core_SetupLogging(d):
    return _BniHardwareWrapper.Core_SetupLogging(d)

class ReceiveManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BniHardwareWrapper.ReceiveManager_swiginit(self, _BniHardwareWrapper.new_ReceiveManager(*args))

    def startReceive(self):
        return _BniHardwareWrapper.ReceiveManager_startReceive(self)

    def availableData(self):
        return _BniHardwareWrapper.ReceiveManager_availableData(self)

    def isReceiving(self):
        return _BniHardwareWrapper.ReceiveManager_isReceiving(self)

    def stopReceive(self):
        return _BniHardwareWrapper.ReceiveManager_stopReceive(self)

    def read(self, *args):
        return _BniHardwareWrapper.ReceiveManager_read(self, *args)

    def drainBuffer(self, readSize, timeout):
        return _BniHardwareWrapper.ReceiveManager_drainBuffer(self, readSize, timeout)

    def blockingRead(self, *args):
        return _BniHardwareWrapper.ReceiveManager_blockingRead(self, *args)

    def getFillLevel(self):
        return _BniHardwareWrapper.ReceiveManager_getFillLevel(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_ReceiveManager

# Register ReceiveManager in _BniHardwareWrapper:
_BniHardwareWrapper.ReceiveManager_swigregister(ReceiveManager)

class Sequencer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, sequencer):
        _BniHardwareWrapper.Sequencer_swiginit(self, _BniHardwareWrapper.new_Sequencer(sequencer))

    def start(self, startAddress):
        return _BniHardwareWrapper.Sequencer_start(self, startAddress)

    def abort(self):
        return _BniHardwareWrapper.Sequencer_abort(self)

    def reset(self):
        return _BniHardwareWrapper.Sequencer_reset(self)

    def getDDRClockFrequencyHz(self):
        return _BniHardwareWrapper.Sequencer_getDDRClockFrequencyHz(self)

    def getSequencerClockFrequencyHz(self):
        return _BniHardwareWrapper.Sequencer_getSequencerClockFrequencyHz(self)

    def getFPGABeamformerNumMultilines(self):
        return _BniHardwareWrapper.Sequencer_getFPGABeamformerNumMultilines(self)

    def uploadMemories(self, commandMemory, asicParameterMemory):
        return _BniHardwareWrapper.Sequencer_uploadMemories(self, commandMemory, asicParameterMemory)
    __swig_destroy__ = _BniHardwareWrapper.delete_Sequencer

# Register Sequencer in _BniHardwareWrapper:
_BniHardwareWrapper.Sequencer_swigregister(Sequencer)

class AccelerometerData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ax = property(_BniHardwareWrapper.AccelerometerData_ax_get, _BniHardwareWrapper.AccelerometerData_ax_set)
    ay = property(_BniHardwareWrapper.AccelerometerData_ay_get, _BniHardwareWrapper.AccelerometerData_ay_set)
    az = property(_BniHardwareWrapper.AccelerometerData_az_get, _BniHardwareWrapper.AccelerometerData_az_set)

    def __eq__(self, rhs):
        return _BniHardwareWrapper.AccelerometerData___eq__(self, rhs)

    def __init__(self):
        _BniHardwareWrapper.AccelerometerData_swiginit(self, _BniHardwareWrapper.new_AccelerometerData())
    __swig_destroy__ = _BniHardwareWrapper.delete_AccelerometerData

# Register AccelerometerData in _BniHardwareWrapper:
_BniHardwareWrapper.AccelerometerData_swigregister(AccelerometerData)

class GyroscopeData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    gx = property(_BniHardwareWrapper.GyroscopeData_gx_get, _BniHardwareWrapper.GyroscopeData_gx_set)
    gy = property(_BniHardwareWrapper.GyroscopeData_gy_get, _BniHardwareWrapper.GyroscopeData_gy_set)
    gz = property(_BniHardwareWrapper.GyroscopeData_gz_get, _BniHardwareWrapper.GyroscopeData_gz_set)

    def __eq__(self, rhs):
        return _BniHardwareWrapper.GyroscopeData___eq__(self, rhs)

    def __init__(self):
        _BniHardwareWrapper.GyroscopeData_swiginit(self, _BniHardwareWrapper.new_GyroscopeData())
    __swig_destroy__ = _BniHardwareWrapper.delete_GyroscopeData

# Register GyroscopeData in _BniHardwareWrapper:
_BniHardwareWrapper.GyroscopeData_swigregister(GyroscopeData)

class MagnetometerData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    mx = property(_BniHardwareWrapper.MagnetometerData_mx_get, _BniHardwareWrapper.MagnetometerData_mx_set)
    my = property(_BniHardwareWrapper.MagnetometerData_my_get, _BniHardwareWrapper.MagnetometerData_my_set)
    mz = property(_BniHardwareWrapper.MagnetometerData_mz_get, _BniHardwareWrapper.MagnetometerData_mz_set)

    def __eq__(self, rhs):
        return _BniHardwareWrapper.MagnetometerData___eq__(self, rhs)

    def __init__(self):
        _BniHardwareWrapper.MagnetometerData_swiginit(self, _BniHardwareWrapper.new_MagnetometerData())
    __swig_destroy__ = _BniHardwareWrapper.delete_MagnetometerData

# Register MagnetometerData in _BniHardwareWrapper:
_BniHardwareWrapper.MagnetometerData_swigregister(MagnetometerData)

class ImuRawData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    accel = property(_BniHardwareWrapper.ImuRawData_accel_get, _BniHardwareWrapper.ImuRawData_accel_set)
    gyro = property(_BniHardwareWrapper.ImuRawData_gyro_get, _BniHardwareWrapper.ImuRawData_gyro_set)
    magneto = property(_BniHardwareWrapper.ImuRawData_magneto_get, _BniHardwareWrapper.ImuRawData_magneto_set)

    def __eq__(self, rhs):
        return _BniHardwareWrapper.ImuRawData___eq__(self, rhs)

    def __init__(self):
        _BniHardwareWrapper.ImuRawData_swiginit(self, _BniHardwareWrapper.new_ImuRawData())
    __swig_destroy__ = _BniHardwareWrapper.delete_ImuRawData

# Register ImuRawData in _BniHardwareWrapper:
_BniHardwareWrapper.ImuRawData_swigregister(ImuRawData)

class ImuDmpData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    timestamp = property(_BniHardwareWrapper.ImuDmpData_timestamp_get, _BniHardwareWrapper.ImuDmpData_timestamp_set)
    accel = property(_BniHardwareWrapper.ImuDmpData_accel_get, _BniHardwareWrapper.ImuDmpData_accel_set)
    gyro = property(_BniHardwareWrapper.ImuDmpData_gyro_get, _BniHardwareWrapper.ImuDmpData_gyro_set)
    magneto = property(_BniHardwareWrapper.ImuDmpData_magneto_get, _BniHardwareWrapper.ImuDmpData_magneto_set)
    gyroCalibrated = property(_BniHardwareWrapper.ImuDmpData_gyroCalibrated_get, _BniHardwareWrapper.ImuDmpData_gyroCalibrated_set)
    magnetoCalibrated = property(_BniHardwareWrapper.ImuDmpData_magnetoCalibrated_get, _BniHardwareWrapper.ImuDmpData_magnetoCalibrated_set)

    def __eq__(self, rhs):
        return _BniHardwareWrapper.ImuDmpData___eq__(self, rhs)

    def __init__(self):
        _BniHardwareWrapper.ImuDmpData_swiginit(self, _BniHardwareWrapper.new_ImuDmpData())
    __swig_destroy__ = _BniHardwareWrapper.delete_ImuDmpData

# Register ImuDmpData in _BniHardwareWrapper:
_BniHardwareWrapper.ImuDmpData_swigregister(ImuDmpData)

Fx3SafetyFeaturesState_UnderVoltageOverTemperatureLockout = _BniHardwareWrapper.Fx3SafetyFeaturesState_UnderVoltageOverTemperatureLockout
Fx3SafetyFeaturesState_OverTemperatureShutdown = _BniHardwareWrapper.Fx3SafetyFeaturesState_OverTemperatureShutdown
Fx3SafetyFeaturesState_UnderVoltageShutdown = _BniHardwareWrapper.Fx3SafetyFeaturesState_UnderVoltageShutdown
Fx3SafetyFeaturesState_ChargingShutdown = _BniHardwareWrapper.Fx3SafetyFeaturesState_ChargingShutdown
Fx3SafetyFeaturesState_OverPowerShutdown = _BniHardwareWrapper.Fx3SafetyFeaturesState_OverPowerShutdown
Fx3SafetyFeaturesState_ActivateAll = _BniHardwareWrapper.Fx3SafetyFeaturesState_ActivateAll
Fx3SafetyFeaturesState_DeactivateAll = _BniHardwareWrapper.Fx3SafetyFeaturesState_DeactivateAll
class IFx3Device(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Fx3Mode_Sleep = _BniHardwareWrapper.IFx3Device_Fx3Mode_Sleep
    Fx3Mode_Standby = _BniHardwareWrapper.IFx3Device_Fx3Mode_Standby
    Fx3ChargeState_Disabled = _BniHardwareWrapper.IFx3Device_Fx3ChargeState_Disabled
    Fx3ChargeState_Enabled = _BniHardwareWrapper.IFx3Device_Fx3ChargeState_Enabled
    Fx3Adc_FpgaAdc = _BniHardwareWrapper.IFx3Device_Fx3Adc_FpgaAdc
    Fx3Adc_PeripheralAdc = _BniHardwareWrapper.IFx3Device_Fx3Adc_PeripheralAdc
    __swig_destroy__ = _BniHardwareWrapper.delete_IFx3Device

    def rebootFx3(self, reloadFirmware):
        return _BniHardwareWrapper.IFx3Device_rebootFx3(self, reloadFirmware)

    def printTlvs(self):
        return _BniHardwareWrapper.IFx3Device_printTlvs(self)

    def getStatisticsTlv(self, tlv):
        return _BniHardwareWrapper.IFx3Device_getStatisticsTlv(self, tlv)

    def eraseAllTlvs(self):
        return _BniHardwareWrapper.IFx3Device_eraseAllTlvs(self)

    def saveTlvs(self):
        return _BniHardwareWrapper.IFx3Device_saveTlvs(self)

    def resetFx3UmapEngine(self):
        return _BniHardwareWrapper.IFx3Device_resetFx3UmapEngine(self)

    def getFx3DebugLog(self):
        return _BniHardwareWrapper.IFx3Device_getFx3DebugLog(self)

    def deleteTlv(self, tlv):
        return _BniHardwareWrapper.IFx3Device_deleteTlv(self, tlv)

    def readTlv(self, tlv):
        return _BniHardwareWrapper.IFx3Device_readTlv(self, tlv)

    def readTlvUIntOrDefault(self, tlv, defaultValue):
        return _BniHardwareWrapper.IFx3Device_readTlvUIntOrDefault(self, tlv, defaultValue)

    def readRawTlv(self, tlv, buffer):
        return _BniHardwareWrapper.IFx3Device_readRawTlv(self, tlv, buffer)

    def setTlv(self, *args):
        return _BniHardwareWrapper.IFx3Device_setTlv(self, *args)

    def setFx3Mode(self, mode):
        return _BniHardwareWrapper.IFx3Device_setFx3Mode(self, mode)

    def getFx3Mode(self):
        return _BniHardwareWrapper.IFx3Device_getFx3Mode(self)

    def setForceCharging(self, state):
        return _BniHardwareWrapper.IFx3Device_setForceCharging(self, state)

    def getChargingState(self):
        return _BniHardwareWrapper.IFx3Device_getChargingState(self)

    def getFx3Version(self):
        return _BniHardwareWrapper.IFx3Device_getFx3Version(self)

    def getFx3BootloaderVersion(self):
        return _BniHardwareWrapper.IFx3Device_getFx3BootloaderVersion(self)

    def getImageCrc(self, firmwareType):
        return _BniHardwareWrapper.IFx3Device_getImageCrc(self, firmwareType)

    def getBatteryPercentage(self):
        return _BniHardwareWrapper.IFx3Device_getBatteryPercentage(self)

    def requestBatteryStatus(self):
        return _BniHardwareWrapper.IFx3Device_requestBatteryStatus(self)

    def enableAsyncBatteryStatus(self):
        return _BniHardwareWrapper.IFx3Device_enableAsyncBatteryStatus(self)

    def disableAsyncBatteryStatus(self):
        return _BniHardwareWrapper.IFx3Device_disableAsyncBatteryStatus(self)

    def queryAppleAuthChipId(self):
        return _BniHardwareWrapper.IFx3Device_queryAppleAuthChipId(self)

    def getEnabledSafetyFeatures(self):
        return _BniHardwareWrapper.IFx3Device_getEnabledSafetyFeatures(self)

    def configureSafetyFeatures(self, features):
        return _BniHardwareWrapper.IFx3Device_configureSafetyFeatures(self, features)

    def getEepromWriteState(self):
        return _BniHardwareWrapper.IFx3Device_getEepromWriteState(self)

    def setEepromWriteState(self, state):
        return _BniHardwareWrapper.IFx3Device_setEepromWriteState(self, state)

    def eraseWriteProtectedEeprom(self):
        return _BniHardwareWrapper.IFx3Device_eraseWriteProtectedEeprom(self)

    def readWriteProtectedEeprom(self):
        return _BniHardwareWrapper.IFx3Device_readWriteProtectedEeprom(self)

    def manualCheckEepromWritable(self, expectEepromWritable):
        return _BniHardwareWrapper.IFx3Device_manualCheckEepromWritable(self, expectEepromWritable)

    def getQiReceiverStatus(self):
        return _BniHardwareWrapper.IFx3Device_getQiReceiverStatus(self)

    def getUsb3ErrorCount(self):
        return _BniHardwareWrapper.IFx3Device_getUsb3ErrorCount(self)

    def runFx3MemoryTest(self):
        return _BniHardwareWrapper.IFx3Device_runFx3MemoryTest(self)

    def getFx3MemoryTestResults(self, firmwareResults):
        return _BniHardwareWrapper.IFx3Device_getFx3MemoryTestResults(self, firmwareResults)

    def getFx3PostStatus(self):
        return _BniHardwareWrapper.IFx3Device_getFx3PostStatus(self)

    def readRawAdcChannel(self, adc, adcConfigure):
        return _BniHardwareWrapper.IFx3Device_readRawAdcChannel(self, adc, adcConfigure)

    def readVoltsAdcChannel(self, adc, adcConfigure):
        return _BniHardwareWrapper.IFx3Device_readVoltsAdcChannel(self, adc, adcConfigure)

    def readTemperature(self, sensor):
        return _BniHardwareWrapper.IFx3Device_readTemperature(self, sensor)

# Register IFx3Device in _BniHardwareWrapper:
_BniHardwareWrapper.IFx3Device_swigregister(IFx3Device)


def __or__(left, right):
    return _BniHardwareWrapper.__or__(left, right)

def __ior__(left, right):
    return _BniHardwareWrapper.__ior__(left, right)
class DeviceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _BniHardwareWrapper.DeviceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BniHardwareWrapper.DeviceVector___nonzero__(self)

    def __bool__(self):
        return _BniHardwareWrapper.DeviceVector___bool__(self)

    def __len__(self):
        return _BniHardwareWrapper.DeviceVector___len__(self)

    def __getslice__(self, i, j):
        return _BniHardwareWrapper.DeviceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BniHardwareWrapper.DeviceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BniHardwareWrapper.DeviceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BniHardwareWrapper.DeviceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BniHardwareWrapper.DeviceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BniHardwareWrapper.DeviceVector___setitem__(self, *args)

    def pop(self):
        return _BniHardwareWrapper.DeviceVector_pop(self)

    def append(self, x):
        return _BniHardwareWrapper.DeviceVector_append(self, x)

    def empty(self):
        return _BniHardwareWrapper.DeviceVector_empty(self)

    def size(self):
        return _BniHardwareWrapper.DeviceVector_size(self)

    def swap(self, v):
        return _BniHardwareWrapper.DeviceVector_swap(self, v)

    def begin(self):
        return _BniHardwareWrapper.DeviceVector_begin(self)

    def end(self):
        return _BniHardwareWrapper.DeviceVector_end(self)

    def rbegin(self):
        return _BniHardwareWrapper.DeviceVector_rbegin(self)

    def rend(self):
        return _BniHardwareWrapper.DeviceVector_rend(self)

    def clear(self):
        return _BniHardwareWrapper.DeviceVector_clear(self)

    def get_allocator(self):
        return _BniHardwareWrapper.DeviceVector_get_allocator(self)

    def pop_back(self):
        return _BniHardwareWrapper.DeviceVector_pop_back(self)

    def erase(self, *args):
        return _BniHardwareWrapper.DeviceVector_erase(self, *args)

    def __init__(self, *args):
        _BniHardwareWrapper.DeviceVector_swiginit(self, _BniHardwareWrapper.new_DeviceVector(*args))

    def push_back(self, x):
        return _BniHardwareWrapper.DeviceVector_push_back(self, x)

    def front(self):
        return _BniHardwareWrapper.DeviceVector_front(self)

    def back(self):
        return _BniHardwareWrapper.DeviceVector_back(self)

    def assign(self, n, x):
        return _BniHardwareWrapper.DeviceVector_assign(self, n, x)

    def resize(self, *args):
        return _BniHardwareWrapper.DeviceVector_resize(self, *args)

    def insert(self, *args):
        return _BniHardwareWrapper.DeviceVector_insert(self, *args)

    def reserve(self, n):
        return _BniHardwareWrapper.DeviceVector_reserve(self, n)

    def capacity(self):
        return _BniHardwareWrapper.DeviceVector_capacity(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_DeviceVector

# Register DeviceVector in _BniHardwareWrapper:
_BniHardwareWrapper.DeviceVector_swigregister(DeviceVector)

class UInt16Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _BniHardwareWrapper.UInt16Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BniHardwareWrapper.UInt16Vector___nonzero__(self)

    def __bool__(self):
        return _BniHardwareWrapper.UInt16Vector___bool__(self)

    def __len__(self):
        return _BniHardwareWrapper.UInt16Vector___len__(self)

    def __getslice__(self, i, j):
        return _BniHardwareWrapper.UInt16Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BniHardwareWrapper.UInt16Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BniHardwareWrapper.UInt16Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BniHardwareWrapper.UInt16Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BniHardwareWrapper.UInt16Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BniHardwareWrapper.UInt16Vector___setitem__(self, *args)

    def pop(self):
        return _BniHardwareWrapper.UInt16Vector_pop(self)

    def append(self, x):
        return _BniHardwareWrapper.UInt16Vector_append(self, x)

    def empty(self):
        return _BniHardwareWrapper.UInt16Vector_empty(self)

    def size(self):
        return _BniHardwareWrapper.UInt16Vector_size(self)

    def swap(self, v):
        return _BniHardwareWrapper.UInt16Vector_swap(self, v)

    def begin(self):
        return _BniHardwareWrapper.UInt16Vector_begin(self)

    def end(self):
        return _BniHardwareWrapper.UInt16Vector_end(self)

    def rbegin(self):
        return _BniHardwareWrapper.UInt16Vector_rbegin(self)

    def rend(self):
        return _BniHardwareWrapper.UInt16Vector_rend(self)

    def clear(self):
        return _BniHardwareWrapper.UInt16Vector_clear(self)

    def get_allocator(self):
        return _BniHardwareWrapper.UInt16Vector_get_allocator(self)

    def pop_back(self):
        return _BniHardwareWrapper.UInt16Vector_pop_back(self)

    def erase(self, *args):
        return _BniHardwareWrapper.UInt16Vector_erase(self, *args)

    def __init__(self, *args):
        _BniHardwareWrapper.UInt16Vector_swiginit(self, _BniHardwareWrapper.new_UInt16Vector(*args))

    def push_back(self, x):
        return _BniHardwareWrapper.UInt16Vector_push_back(self, x)

    def front(self):
        return _BniHardwareWrapper.UInt16Vector_front(self)

    def back(self):
        return _BniHardwareWrapper.UInt16Vector_back(self)

    def assign(self, n, x):
        return _BniHardwareWrapper.UInt16Vector_assign(self, n, x)

    def resize(self, *args):
        return _BniHardwareWrapper.UInt16Vector_resize(self, *args)

    def insert(self, *args):
        return _BniHardwareWrapper.UInt16Vector_insert(self, *args)

    def reserve(self, n):
        return _BniHardwareWrapper.UInt16Vector_reserve(self, n)

    def capacity(self):
        return _BniHardwareWrapper.UInt16Vector_capacity(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_UInt16Vector

# Register UInt16Vector in _BniHardwareWrapper:
_BniHardwareWrapper.UInt16Vector_swigregister(UInt16Vector)

class BoolVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _BniHardwareWrapper.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BniHardwareWrapper.BoolVector___nonzero__(self)

    def __bool__(self):
        return _BniHardwareWrapper.BoolVector___bool__(self)

    def __len__(self):
        return _BniHardwareWrapper.BoolVector___len__(self)

    def __getslice__(self, i, j):
        return _BniHardwareWrapper.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BniHardwareWrapper.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BniHardwareWrapper.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BniHardwareWrapper.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BniHardwareWrapper.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BniHardwareWrapper.BoolVector___setitem__(self, *args)

    def pop(self):
        return _BniHardwareWrapper.BoolVector_pop(self)

    def append(self, x):
        return _BniHardwareWrapper.BoolVector_append(self, x)

    def empty(self):
        return _BniHardwareWrapper.BoolVector_empty(self)

    def size(self):
        return _BniHardwareWrapper.BoolVector_size(self)

    def swap(self, v):
        return _BniHardwareWrapper.BoolVector_swap(self, v)

    def begin(self):
        return _BniHardwareWrapper.BoolVector_begin(self)

    def end(self):
        return _BniHardwareWrapper.BoolVector_end(self)

    def rbegin(self):
        return _BniHardwareWrapper.BoolVector_rbegin(self)

    def rend(self):
        return _BniHardwareWrapper.BoolVector_rend(self)

    def clear(self):
        return _BniHardwareWrapper.BoolVector_clear(self)

    def get_allocator(self):
        return _BniHardwareWrapper.BoolVector_get_allocator(self)

    def pop_back(self):
        return _BniHardwareWrapper.BoolVector_pop_back(self)

    def erase(self, *args):
        return _BniHardwareWrapper.BoolVector_erase(self, *args)

    def __init__(self, *args):
        _BniHardwareWrapper.BoolVector_swiginit(self, _BniHardwareWrapper.new_BoolVector(*args))

    def push_back(self, x):
        return _BniHardwareWrapper.BoolVector_push_back(self, x)

    def front(self):
        return _BniHardwareWrapper.BoolVector_front(self)

    def back(self):
        return _BniHardwareWrapper.BoolVector_back(self)

    def assign(self, n, x):
        return _BniHardwareWrapper.BoolVector_assign(self, n, x)

    def resize(self, *args):
        return _BniHardwareWrapper.BoolVector_resize(self, *args)

    def insert(self, *args):
        return _BniHardwareWrapper.BoolVector_insert(self, *args)

    def reserve(self, n):
        return _BniHardwareWrapper.BoolVector_reserve(self, n)

    def capacity(self):
        return _BniHardwareWrapper.BoolVector_capacity(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_BoolVector

# Register BoolVector in _BniHardwareWrapper:
_BniHardwareWrapper.BoolVector_swigregister(BoolVector)

class UInt8Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _BniHardwareWrapper.UInt8Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BniHardwareWrapper.UInt8Vector___nonzero__(self)

    def __bool__(self):
        return _BniHardwareWrapper.UInt8Vector___bool__(self)

    def __len__(self):
        return _BniHardwareWrapper.UInt8Vector___len__(self)

    def __getslice__(self, i, j):
        return _BniHardwareWrapper.UInt8Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BniHardwareWrapper.UInt8Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BniHardwareWrapper.UInt8Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BniHardwareWrapper.UInt8Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BniHardwareWrapper.UInt8Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BniHardwareWrapper.UInt8Vector___setitem__(self, *args)

    def pop(self):
        return _BniHardwareWrapper.UInt8Vector_pop(self)

    def append(self, x):
        return _BniHardwareWrapper.UInt8Vector_append(self, x)

    def empty(self):
        return _BniHardwareWrapper.UInt8Vector_empty(self)

    def size(self):
        return _BniHardwareWrapper.UInt8Vector_size(self)

    def swap(self, v):
        return _BniHardwareWrapper.UInt8Vector_swap(self, v)

    def begin(self):
        return _BniHardwareWrapper.UInt8Vector_begin(self)

    def end(self):
        return _BniHardwareWrapper.UInt8Vector_end(self)

    def rbegin(self):
        return _BniHardwareWrapper.UInt8Vector_rbegin(self)

    def rend(self):
        return _BniHardwareWrapper.UInt8Vector_rend(self)

    def clear(self):
        return _BniHardwareWrapper.UInt8Vector_clear(self)

    def get_allocator(self):
        return _BniHardwareWrapper.UInt8Vector_get_allocator(self)

    def pop_back(self):
        return _BniHardwareWrapper.UInt8Vector_pop_back(self)

    def erase(self, *args):
        return _BniHardwareWrapper.UInt8Vector_erase(self, *args)

    def __init__(self, *args):
        _BniHardwareWrapper.UInt8Vector_swiginit(self, _BniHardwareWrapper.new_UInt8Vector(*args))

    def push_back(self, x):
        return _BniHardwareWrapper.UInt8Vector_push_back(self, x)

    def front(self):
        return _BniHardwareWrapper.UInt8Vector_front(self)

    def back(self):
        return _BniHardwareWrapper.UInt8Vector_back(self)

    def assign(self, n, x):
        return _BniHardwareWrapper.UInt8Vector_assign(self, n, x)

    def resize(self, *args):
        return _BniHardwareWrapper.UInt8Vector_resize(self, *args)

    def insert(self, *args):
        return _BniHardwareWrapper.UInt8Vector_insert(self, *args)

    def reserve(self, n):
        return _BniHardwareWrapper.UInt8Vector_reserve(self, n)

    def capacity(self):
        return _BniHardwareWrapper.UInt8Vector_capacity(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_UInt8Vector

# Register UInt8Vector in _BniHardwareWrapper:
_BniHardwareWrapper.UInt8Vector_swigregister(UInt8Vector)

class ComplexDoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _BniHardwareWrapper.ComplexDoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BniHardwareWrapper.ComplexDoubleVector___nonzero__(self)

    def __bool__(self):
        return _BniHardwareWrapper.ComplexDoubleVector___bool__(self)

    def __len__(self):
        return _BniHardwareWrapper.ComplexDoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _BniHardwareWrapper.ComplexDoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BniHardwareWrapper.ComplexDoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BniHardwareWrapper.ComplexDoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BniHardwareWrapper.ComplexDoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BniHardwareWrapper.ComplexDoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BniHardwareWrapper.ComplexDoubleVector___setitem__(self, *args)

    def pop(self):
        return _BniHardwareWrapper.ComplexDoubleVector_pop(self)

    def append(self, x):
        return _BniHardwareWrapper.ComplexDoubleVector_append(self, x)

    def empty(self):
        return _BniHardwareWrapper.ComplexDoubleVector_empty(self)

    def size(self):
        return _BniHardwareWrapper.ComplexDoubleVector_size(self)

    def swap(self, v):
        return _BniHardwareWrapper.ComplexDoubleVector_swap(self, v)

    def begin(self):
        return _BniHardwareWrapper.ComplexDoubleVector_begin(self)

    def end(self):
        return _BniHardwareWrapper.ComplexDoubleVector_end(self)

    def rbegin(self):
        return _BniHardwareWrapper.ComplexDoubleVector_rbegin(self)

    def rend(self):
        return _BniHardwareWrapper.ComplexDoubleVector_rend(self)

    def clear(self):
        return _BniHardwareWrapper.ComplexDoubleVector_clear(self)

    def get_allocator(self):
        return _BniHardwareWrapper.ComplexDoubleVector_get_allocator(self)

    def pop_back(self):
        return _BniHardwareWrapper.ComplexDoubleVector_pop_back(self)

    def erase(self, *args):
        return _BniHardwareWrapper.ComplexDoubleVector_erase(self, *args)

    def __init__(self, *args):
        _BniHardwareWrapper.ComplexDoubleVector_swiginit(self, _BniHardwareWrapper.new_ComplexDoubleVector(*args))

    def push_back(self, x):
        return _BniHardwareWrapper.ComplexDoubleVector_push_back(self, x)

    def front(self):
        return _BniHardwareWrapper.ComplexDoubleVector_front(self)

    def back(self):
        return _BniHardwareWrapper.ComplexDoubleVector_back(self)

    def assign(self, n, x):
        return _BniHardwareWrapper.ComplexDoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _BniHardwareWrapper.ComplexDoubleVector_resize(self, *args)

    def insert(self, *args):
        return _BniHardwareWrapper.ComplexDoubleVector_insert(self, *args)

    def reserve(self, n):
        return _BniHardwareWrapper.ComplexDoubleVector_reserve(self, n)

    def capacity(self):
        return _BniHardwareWrapper.ComplexDoubleVector_capacity(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_ComplexDoubleVector

# Register ComplexDoubleVector in _BniHardwareWrapper:
_BniHardwareWrapper.ComplexDoubleVector_swigregister(ComplexDoubleVector)

class UInt32Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _BniHardwareWrapper.UInt32Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BniHardwareWrapper.UInt32Vector___nonzero__(self)

    def __bool__(self):
        return _BniHardwareWrapper.UInt32Vector___bool__(self)

    def __len__(self):
        return _BniHardwareWrapper.UInt32Vector___len__(self)

    def __getslice__(self, i, j):
        return _BniHardwareWrapper.UInt32Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BniHardwareWrapper.UInt32Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BniHardwareWrapper.UInt32Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BniHardwareWrapper.UInt32Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BniHardwareWrapper.UInt32Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BniHardwareWrapper.UInt32Vector___setitem__(self, *args)

    def pop(self):
        return _BniHardwareWrapper.UInt32Vector_pop(self)

    def append(self, x):
        return _BniHardwareWrapper.UInt32Vector_append(self, x)

    def empty(self):
        return _BniHardwareWrapper.UInt32Vector_empty(self)

    def size(self):
        return _BniHardwareWrapper.UInt32Vector_size(self)

    def swap(self, v):
        return _BniHardwareWrapper.UInt32Vector_swap(self, v)

    def begin(self):
        return _BniHardwareWrapper.UInt32Vector_begin(self)

    def end(self):
        return _BniHardwareWrapper.UInt32Vector_end(self)

    def rbegin(self):
        return _BniHardwareWrapper.UInt32Vector_rbegin(self)

    def rend(self):
        return _BniHardwareWrapper.UInt32Vector_rend(self)

    def clear(self):
        return _BniHardwareWrapper.UInt32Vector_clear(self)

    def get_allocator(self):
        return _BniHardwareWrapper.UInt32Vector_get_allocator(self)

    def pop_back(self):
        return _BniHardwareWrapper.UInt32Vector_pop_back(self)

    def erase(self, *args):
        return _BniHardwareWrapper.UInt32Vector_erase(self, *args)

    def __init__(self, *args):
        _BniHardwareWrapper.UInt32Vector_swiginit(self, _BniHardwareWrapper.new_UInt32Vector(*args))

    def push_back(self, x):
        return _BniHardwareWrapper.UInt32Vector_push_back(self, x)

    def front(self):
        return _BniHardwareWrapper.UInt32Vector_front(self)

    def back(self):
        return _BniHardwareWrapper.UInt32Vector_back(self)

    def assign(self, n, x):
        return _BniHardwareWrapper.UInt32Vector_assign(self, n, x)

    def resize(self, *args):
        return _BniHardwareWrapper.UInt32Vector_resize(self, *args)

    def insert(self, *args):
        return _BniHardwareWrapper.UInt32Vector_insert(self, *args)

    def reserve(self, n):
        return _BniHardwareWrapper.UInt32Vector_reserve(self, n)

    def capacity(self):
        return _BniHardwareWrapper.UInt32Vector_capacity(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_UInt32Vector

# Register UInt32Vector in _BniHardwareWrapper:
_BniHardwareWrapper.UInt32Vector_swigregister(UInt32Vector)

class Manager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BniHardwareWrapper.Manager_swiginit(self, _BniHardwareWrapper.new_Manager(*args))
    __swig_destroy__ = _BniHardwareWrapper.delete_Manager

    def getDevices(self):
        return _BniHardwareWrapper.Manager_getDevices(self)

    def waitForDevice(self, timeout=0):
        return _BniHardwareWrapper.Manager_waitForDevice(self, timeout)

    def waitForDevicesChange(self, timeout=0):
        return _BniHardwareWrapper.Manager_waitForDevicesChange(self, timeout)

# Register Manager in _BniHardwareWrapper:
_BniHardwareWrapper.Manager_swigregister(Manager)

ADS1015_REGISTER_CONVERSION = _BniHardwareWrapper.ADS1015_REGISTER_CONVERSION
ADS1015_REGISTER_CONFIG = _BniHardwareWrapper.ADS1015_REGISTER_CONFIG
ADS1015_REGISTER_LO_THRESH = _BniHardwareWrapper.ADS1015_REGISTER_LO_THRESH
ADS1015_REGISTER_HI_THRESH = _BniHardwareWrapper.ADS1015_REGISTER_HI_THRESH
ADS1015_ALERT_EVERY_CONVERSION = _BniHardwareWrapper.ADS1015_ALERT_EVERY_CONVERSION
ADS1015_ALERT_EVERY_2_CONVERSION = _BniHardwareWrapper.ADS1015_ALERT_EVERY_2_CONVERSION
ADS1015_ALERT_EVERY_4_CONVERSION = _BniHardwareWrapper.ADS1015_ALERT_EVERY_4_CONVERSION
ADS1015_ALERT_DISABLE = _BniHardwareWrapper.ADS1015_ALERT_DISABLE
ADS1015_ACTIVE_LOW = _BniHardwareWrapper.ADS1015_ACTIVE_LOW
ADS1015_ACTIVE_HIGH = _BniHardwareWrapper.ADS1015_ACTIVE_HIGH
ADS1015_STANDARD_COMPARATOR = _BniHardwareWrapper.ADS1015_STANDARD_COMPARATOR
ADS1015_WINDOW_COMPARATOR = _BniHardwareWrapper.ADS1015_WINDOW_COMPARATOR
ADS1015_6144MV = _BniHardwareWrapper.ADS1015_6144MV
ADS1015_4096MV = _BniHardwareWrapper.ADS1015_4096MV
ADS1015_2048MV = _BniHardwareWrapper.ADS1015_2048MV
ADS1015_1024MV = _BniHardwareWrapper.ADS1015_1024MV
ADS1015_512MV = _BniHardwareWrapper.ADS1015_512MV
ADS1015_256MV = _BniHardwareWrapper.ADS1015_256MV
ADS1015_IN0_IN1 = _BniHardwareWrapper.ADS1015_IN0_IN1
ADS1015_IN0_IN3 = _BniHardwareWrapper.ADS1015_IN0_IN3
ADS1015_IN1_IN3 = _BniHardwareWrapper.ADS1015_IN1_IN3
ADS1015_IN2_IN3 = _BniHardwareWrapper.ADS1015_IN2_IN3
ADS1015_IN0_GND = _BniHardwareWrapper.ADS1015_IN0_GND
ADS1015_IN1_GND = _BniHardwareWrapper.ADS1015_IN1_GND
ADS1015_IN2_GND = _BniHardwareWrapper.ADS1015_IN2_GND
ADS1015_IN3_GND = _BniHardwareWrapper.ADS1015_IN3_GND
ADS1015_CONTINUOUS_MODE = _BniHardwareWrapper.ADS1015_CONTINUOUS_MODE
ADS1015_SINGLESHOT_MODE = _BniHardwareWrapper.ADS1015_SINGLESHOT_MODE
ADS1015_128SPS = _BniHardwareWrapper.ADS1015_128SPS
ADS1015_250SPS = _BniHardwareWrapper.ADS1015_250SPS
ADS1015_490SPS = _BniHardwareWrapper.ADS1015_490SPS
ADS1015_920SPS = _BniHardwareWrapper.ADS1015_920SPS
ADS1015_1600SPS = _BniHardwareWrapper.ADS1015_1600SPS
ADS1015_2400SPS = _BniHardwareWrapper.ADS1015_2400SPS
ADS1015_3300SPS = _BniHardwareWrapper.ADS1015_3300SPS
class ads1015_config_regs_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    comparatorAlert = property(_BniHardwareWrapper.ads1015_config_regs_t_comparatorAlert_get, _BniHardwareWrapper.ads1015_config_regs_t_comparatorAlert_set)
    comparatorLatch = property(_BniHardwareWrapper.ads1015_config_regs_t_comparatorLatch_get, _BniHardwareWrapper.ads1015_config_regs_t_comparatorLatch_set)
    comparatorPolarity = property(_BniHardwareWrapper.ads1015_config_regs_t_comparatorPolarity_get, _BniHardwareWrapper.ads1015_config_regs_t_comparatorPolarity_set)
    comparatorMode = property(_BniHardwareWrapper.ads1015_config_regs_t_comparatorMode_get, _BniHardwareWrapper.ads1015_config_regs_t_comparatorMode_set)
    dataRate = property(_BniHardwareWrapper.ads1015_config_regs_t_dataRate_get, _BniHardwareWrapper.ads1015_config_regs_t_dataRate_set)
    mode = property(_BniHardwareWrapper.ads1015_config_regs_t_mode_get, _BniHardwareWrapper.ads1015_config_regs_t_mode_set)
    gain = property(_BniHardwareWrapper.ads1015_config_regs_t_gain_get, _BniHardwareWrapper.ads1015_config_regs_t_gain_set)
    source = property(_BniHardwareWrapper.ads1015_config_regs_t_source_get, _BniHardwareWrapper.ads1015_config_regs_t_source_set)
    sample = property(_BniHardwareWrapper.ads1015_config_regs_t_sample_get, _BniHardwareWrapper.ads1015_config_regs_t_sample_set)

    def __init__(self):
        _BniHardwareWrapper.ads1015_config_regs_t_swiginit(self, _BniHardwareWrapper.new_ads1015_config_regs_t())
    __swig_destroy__ = _BniHardwareWrapper.delete_ads1015_config_regs_t

# Register ads1015_config_regs_t in _BniHardwareWrapper:
_BniHardwareWrapper.ads1015_config_regs_t_swigregister(ads1015_config_regs_t)

class ads1015_config_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    value = property(_BniHardwareWrapper.ads1015_config_t_value_get, _BniHardwareWrapper.ads1015_config_t_value_set)
    registers = property(_BniHardwareWrapper.ads1015_config_t_registers_get, _BniHardwareWrapper.ads1015_config_t_registers_set)

    def __init__(self):
        _BniHardwareWrapper.ads1015_config_t_swiginit(self, _BniHardwareWrapper.new_ads1015_config_t())
    __swig_destroy__ = _BniHardwareWrapper.delete_ads1015_config_t

# Register ads1015_config_t in _BniHardwareWrapper:
_BniHardwareWrapper.ads1015_config_t_swigregister(ads1015_config_t)

class Uint2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint2_Minimum
    Maximum = _BniHardwareWrapper.Uint2_Maximum
    Bits = _BniHardwareWrapper.Uint2_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint2_swiginit(self, _BniHardwareWrapper.new_Uint2(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint2___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint2___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint2_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint2_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint2_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint2_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint2

# Register Uint2 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint2_swigregister(Uint2)

class Uint3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint3_Minimum
    Maximum = _BniHardwareWrapper.Uint3_Maximum
    Bits = _BniHardwareWrapper.Uint3_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint3_swiginit(self, _BniHardwareWrapper.new_Uint3(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint3___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint3___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint3_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint3_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint3_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint3_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint3

# Register Uint3 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint3_swigregister(Uint3)

class Uint4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint4_Minimum
    Maximum = _BniHardwareWrapper.Uint4_Maximum
    Bits = _BniHardwareWrapper.Uint4_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint4_swiginit(self, _BniHardwareWrapper.new_Uint4(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint4___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint4___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint4_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint4_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint4_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint4_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint4

# Register Uint4 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint4_swigregister(Uint4)

class Int5(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Int5_Minimum
    Maximum = _BniHardwareWrapper.Int5_Maximum
    Bits = _BniHardwareWrapper.Int5_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Int5_swiginit(self, _BniHardwareWrapper.new_Int5(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Int5___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Int5___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Int5_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Int5_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Int5_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Int5_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Int5

# Register Int5 in _BniHardwareWrapper:
_BniHardwareWrapper.Int5_swigregister(Int5)

class Uint5(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint5_Minimum
    Maximum = _BniHardwareWrapper.Uint5_Maximum
    Bits = _BniHardwareWrapper.Uint5_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint5_swiginit(self, _BniHardwareWrapper.new_Uint5(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint5___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint5___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint5_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint5_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint5_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint5_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint5

# Register Uint5 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint5_swigregister(Uint5)

class Uint6(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint6_Minimum
    Maximum = _BniHardwareWrapper.Uint6_Maximum
    Bits = _BniHardwareWrapper.Uint6_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint6_swiginit(self, _BniHardwareWrapper.new_Uint6(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint6___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint6___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint6_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint6_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint6_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint6_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint6

# Register Uint6 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint6_swigregister(Uint6)

class Uint7(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint7_Minimum
    Maximum = _BniHardwareWrapper.Uint7_Maximum
    Bits = _BniHardwareWrapper.Uint7_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint7_swiginit(self, _BniHardwareWrapper.new_Uint7(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint7___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint7___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint7_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint7_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint7_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint7_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint7

# Register Uint7 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint7_swigregister(Uint7)

class Uint8(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint8_Minimum
    Maximum = _BniHardwareWrapper.Uint8_Maximum
    Bits = _BniHardwareWrapper.Uint8_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint8_swiginit(self, _BniHardwareWrapper.new_Uint8(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint8___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint8___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint8_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint8_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint8_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint8_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint8

# Register Uint8 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint8_swigregister(Uint8)

class Uint9(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint9_Minimum
    Maximum = _BniHardwareWrapper.Uint9_Maximum
    Bits = _BniHardwareWrapper.Uint9_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint9_swiginit(self, _BniHardwareWrapper.new_Uint9(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint9___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint9___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint9_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint9_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint9_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint9_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint9

# Register Uint9 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint9_swigregister(Uint9)

class Uint11(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint11_Minimum
    Maximum = _BniHardwareWrapper.Uint11_Maximum
    Bits = _BniHardwareWrapper.Uint11_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint11_swiginit(self, _BniHardwareWrapper.new_Uint11(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint11___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint11___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint11_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint11_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint11_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint11_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint11

# Register Uint11 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint11_swigregister(Uint11)

class Int12(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Int12_Minimum
    Maximum = _BniHardwareWrapper.Int12_Maximum
    Bits = _BniHardwareWrapper.Int12_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Int12_swiginit(self, _BniHardwareWrapper.new_Int12(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Int12___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Int12___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Int12_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Int12_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Int12_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Int12_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Int12

# Register Int12 in _BniHardwareWrapper:
_BniHardwareWrapper.Int12_swigregister(Int12)

class Uint12(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint12_Minimum
    Maximum = _BniHardwareWrapper.Uint12_Maximum
    Bits = _BniHardwareWrapper.Uint12_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint12_swiginit(self, _BniHardwareWrapper.new_Uint12(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint12___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint12___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint12_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint12_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint12_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint12_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint12

# Register Uint12 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint12_swigregister(Uint12)

class Uint14(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint14_Minimum
    Maximum = _BniHardwareWrapper.Uint14_Maximum
    Bits = _BniHardwareWrapper.Uint14_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint14_swiginit(self, _BniHardwareWrapper.new_Uint14(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint14___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint14___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint14_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint14_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint14_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint14_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint14

# Register Uint14 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint14_swigregister(Uint14)

class Int16(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Int16_Minimum
    Maximum = _BniHardwareWrapper.Int16_Maximum
    Bits = _BniHardwareWrapper.Int16_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Int16_swiginit(self, _BniHardwareWrapper.new_Int16(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Int16___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Int16___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Int16_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Int16_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Int16_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Int16_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Int16

# Register Int16 in _BniHardwareWrapper:
_BniHardwareWrapper.Int16_swigregister(Int16)

class Uint16(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint16_Minimum
    Maximum = _BniHardwareWrapper.Uint16_Maximum
    Bits = _BniHardwareWrapper.Uint16_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint16_swiginit(self, _BniHardwareWrapper.new_Uint16(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint16___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint16___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint16_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint16_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint16_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint16_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint16

# Register Uint16 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint16_swigregister(Uint16)

class Int24(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Int24_Minimum
    Maximum = _BniHardwareWrapper.Int24_Maximum
    Bits = _BniHardwareWrapper.Int24_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Int24_swiginit(self, _BniHardwareWrapper.new_Int24(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Int24___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Int24___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Int24_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Int24_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Int24_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Int24_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Int24

# Register Int24 in _BniHardwareWrapper:
_BniHardwareWrapper.Int24_swigregister(Int24)

class Uint24(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint24_Minimum
    Maximum = _BniHardwareWrapper.Uint24_Maximum
    Bits = _BniHardwareWrapper.Uint24_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint24_swiginit(self, _BniHardwareWrapper.new_Uint24(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint24___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint24___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint24_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint24_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint24_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint24_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint24

# Register Uint24 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint24_swigregister(Uint24)

class Uint25(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint25_Minimum
    Maximum = _BniHardwareWrapper.Uint25_Maximum
    Bits = _BniHardwareWrapper.Uint25_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint25_swiginit(self, _BniHardwareWrapper.new_Uint25(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint25___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint25___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint25_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint25_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint25_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint25_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint25

# Register Uint25 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint25_swigregister(Uint25)

class Uint32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint32_Minimum
    Maximum = _BniHardwareWrapper.Uint32_Maximum
    Bits = _BniHardwareWrapper.Uint32_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint32_swiginit(self, _BniHardwareWrapper.new_Uint32(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint32___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint32___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint32_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint32_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint32_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint32_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint32

# Register Uint32 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint32_swigregister(Uint32)

class Uint48(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint48_Minimum
    Maximum = _BniHardwareWrapper.Uint48_Maximum
    Bits = _BniHardwareWrapper.Uint48_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint48_swiginit(self, _BniHardwareWrapper.new_Uint48(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint48___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint48___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint48_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint48_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint48_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint48_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint48

# Register Uint48 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint48_swigregister(Uint48)

class Uint64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Uint64_Minimum
    Maximum = _BniHardwareWrapper.Uint64_Maximum
    Bits = _BniHardwareWrapper.Uint64_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Uint64_swiginit(self, _BniHardwareWrapper.new_Uint64(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Uint64___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Uint64___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Uint64_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Uint64_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Uint64_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Uint64_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Uint64

# Register Uint64 in _BniHardwareWrapper:
_BniHardwareWrapper.Uint64_swigregister(Uint64)

class PackedParameterStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BniHardwareWrapper.PackedParameterStructure_swiginit(self, _BniHardwareWrapper.new_PackedParameterStructure(*args))

    def dataVector(self):
        return _BniHardwareWrapper.PackedParameterStructure_dataVector(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_PackedParameterStructure

# Register PackedParameterStructure in _BniHardwareWrapper:
_BniHardwareWrapper.PackedParameterStructure_swigregister(PackedParameterStructure)


def packParams(p, numBits):
    return _BniHardwareWrapper.packParams(p, numBits)

def unpackParams(params):
    return _BniHardwareWrapper.unpackParams(params)
class Int12_8_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def size(self):
        return _BniHardwareWrapper.Int12_8_array_size(self)

    def at(self, __n):
        return _BniHardwareWrapper.Int12_8_array_at(self, __n)

    def __len__(self):
        return _BniHardwareWrapper.Int12_8_array___len__(self)

    def _get(self, i):
        return _BniHardwareWrapper.Int12_8_array__get(self, i)

    def _set(self, i, v):
        return _BniHardwareWrapper.Int12_8_array__set(self, i, v)

    def __getitem__(self, key):
        if isinstance(key, slice):
            return tuple(self._get(i) for i in range(*key.indices(len(self))))

        if key < 0:
            key += len(self)
        return self._get(key)

    def __setitem__(self, key, v):
        if isinstance(key, slice):
            for i in range(*key.indices(len(self))):
                self._set(i, v[i])
        else:
            if key < 0:
                key += len(self)
            self._set(key, v)

    def __repr__(self):
        return "%s(%s)" % (self.__class__.__name__, ", ".join(str(v) for v in self[:]))


    def __init__(self):
        _BniHardwareWrapper.Int12_8_array_swiginit(self, _BniHardwareWrapper.new_Int12_8_array())
    __swig_destroy__ = _BniHardwareWrapper.delete_Int12_8_array

# Register Int12_8_array in _BniHardwareWrapper:
_BniHardwareWrapper.Int12_8_array_swigregister(Int12_8_array)

class size_t_2_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def size(self):
        return _BniHardwareWrapper.size_t_2_array_size(self)

    def at(self, __n):
        return _BniHardwareWrapper.size_t_2_array_at(self, __n)

    def __len__(self):
        return _BniHardwareWrapper.size_t_2_array___len__(self)

    def _get(self, i):
        return _BniHardwareWrapper.size_t_2_array__get(self, i)

    def _set(self, i, v):
        return _BniHardwareWrapper.size_t_2_array__set(self, i, v)

    def __getitem__(self, key):
        if isinstance(key, slice):
            return tuple(self._get(i) for i in range(*key.indices(len(self))))

        if key < 0:
            key += len(self)
        return self._get(key)

    def __setitem__(self, key, v):
        if isinstance(key, slice):
            for i in range(*key.indices(len(self))):
                self._set(i, v[i])
        else:
            if key < 0:
                key += len(self)
            self._set(key, v)

    def __repr__(self):
        return "%s(%s)" % (self.__class__.__name__, ", ".join(str(v) for v in self[:]))


    def __init__(self):
        _BniHardwareWrapper.size_t_2_array_swiginit(self, _BniHardwareWrapper.new_size_t_2_array())
    __swig_destroy__ = _BniHardwareWrapper.delete_size_t_2_array

# Register size_t_2_array in _BniHardwareWrapper:
_BniHardwareWrapper.size_t_2_array_swigregister(size_t_2_array)

PPKT_OP_READ = _BniHardwareWrapper.PPKT_OP_READ
PPKT_OP_WRITE = _BniHardwareWrapper.PPKT_OP_WRITE
PPKT_OP_RSP_16 = _BniHardwareWrapper.PPKT_OP_RSP_16
PPKT_OP_RSP_48 = _BniHardwareWrapper.PPKT_OP_RSP_48
PPKT_OP_MASK = _BniHardwareWrapper.PPKT_OP_MASK
PPKT_OP_BITS = _BniHardwareWrapper.PPKT_OP_BITS
RX_DEBUG_MODE_PASSTHROUGH = _BniHardwareWrapper.RX_DEBUG_MODE_PASSTHROUGH
RX_DEBUG_MODE_WALKING = _BniHardwareWrapper.RX_DEBUG_MODE_WALKING
RX_DEBUG_MODE_RAMP = _BniHardwareWrapper.RX_DEBUG_MODE_RAMP
RX_DEBUG_MODE_ALTERNATE = _BniHardwareWrapper.RX_DEBUG_MODE_ALTERNATE
RX_DEBUG_MODE_MASK = _BniHardwareWrapper.RX_DEBUG_MODE_MASK
RX_DEBUG_MODE_BITS = _BniHardwareWrapper.RX_DEBUG_MODE_BITS
TX_MESH_SOURCE_DOWN = _BniHardwareWrapper.TX_MESH_SOURCE_DOWN
TX_MESH_SOURCE_UP = _BniHardwareWrapper.TX_MESH_SOURCE_UP
TX_MESH_SOURCE_LEFT = _BniHardwareWrapper.TX_MESH_SOURCE_LEFT
TX_MESH_SOURCE_RIGHT = _BniHardwareWrapper.TX_MESH_SOURCE_RIGHT
TX_MESH_SOURCE_WFGEN_0 = _BniHardwareWrapper.TX_MESH_SOURCE_WFGEN_0
TX_MESH_SOURCE_WFGEN_1 = _BniHardwareWrapper.TX_MESH_SOURCE_WFGEN_1
TX_MESH_SOURCE_MASK = _BniHardwareWrapper.TX_MESH_SOURCE_MASK
TX_MESH_SOURCE_BITS = _BniHardwareWrapper.TX_MESH_SOURCE_BITS
TIA_BIST_MODE_FUNCTIONAL = _BniHardwareWrapper.TIA_BIST_MODE_FUNCTIONAL
TIA_BIST_MODE_LOW = _BniHardwareWrapper.TIA_BIST_MODE_LOW
TIA_BIST_MODE_HIGH = _BniHardwareWrapper.TIA_BIST_MODE_HIGH
TIA_BIST_MODE_MASK = _BniHardwareWrapper.TIA_BIST_MODE_MASK
TIA_BIST_MODE_BITS = _BniHardwareWrapper.TIA_BIST_MODE_BITS
ADC_DELAY_MODE_AUTO = _BniHardwareWrapper.ADC_DELAY_MODE_AUTO
ADC_DELAY_MODE_MANUAL = _BniHardwareWrapper.ADC_DELAY_MODE_MANUAL
ADC_DELAY_MODE_AUTO_LOCK = _BniHardwareWrapper.ADC_DELAY_MODE_AUTO_LOCK
ADC_DELAY_MODE_MASK = _BniHardwareWrapper.ADC_DELAY_MODE_MASK
ADC_DELAY_MODE_BITS = _BniHardwareWrapper.ADC_DELAY_MODE_BITS
class ppkt_header_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    module_id = property(_BniHardwareWrapper.ppkt_header_t_module_id_get, _BniHardwareWrapper.ppkt_header_t_module_id_set)
    region_addr = property(_BniHardwareWrapper.ppkt_header_t_region_addr_get, _BniHardwareWrapper.ppkt_header_t_region_addr_set)
    op = property(_BniHardwareWrapper.ppkt_header_t_op_get, _BniHardwareWrapper.ppkt_header_t_op_set)

    def pack(self):
        return _BniHardwareWrapper.ppkt_header_t_pack(self)

    def unpack(self, data):
        return _BniHardwareWrapper.ppkt_header_t_unpack(self, data)

    def packWord(self):
        return _BniHardwareWrapper.ppkt_header_t_packWord(self)

    def unpackWord(self, p):
        return _BniHardwareWrapper.ppkt_header_t_unpackWord(self, p)

    def __init__(self):
        _BniHardwareWrapper.ppkt_header_t_swiginit(self, _BniHardwareWrapper.new_ppkt_header_t())
    __swig_destroy__ = _BniHardwareWrapper.delete_ppkt_header_t

# Register ppkt_header_t in _BniHardwareWrapper:
_BniHardwareWrapper.ppkt_header_t_swigregister(ppkt_header_t)
PPKT_WORD_WIDTH = cvar.PPKT_WORD_WIDTH
PPKT_CTRL_WIDTH = cvar.PPKT_CTRL_WIDTH
PPKT_OP_WIDTH = cvar.PPKT_OP_WIDTH
PPKT_ADDR_WIDTH = cvar.PPKT_ADDR_WIDTH
PPKT_CMD_WIDTH = cvar.PPKT_CMD_WIDTH
PPKT_RSVD_WIDTH = cvar.PPKT_RSVD_WIDTH
PPKT_MAX_PACKET_LENGTH = cvar.PPKT_MAX_PACKET_LENGTH
PPKT_DDR_COUNTER_WIDTH = cvar.PPKT_DDR_COUNTER_WIDTH
PPKT_MODULE_ID_MSB = cvar.PPKT_MODULE_ID_MSB
PPKT_MODULE_ID_LSB = cvar.PPKT_MODULE_ID_LSB
PPKT_MODULE_ID_LEN = cvar.PPKT_MODULE_ID_LEN
PPKT_REGION_MSB = cvar.PPKT_REGION_MSB
PPKT_REGION_LSB = cvar.PPKT_REGION_LSB
PPKT_REGION_LEN = cvar.PPKT_REGION_LEN
PPKT_GLOBAL_ADDRESS = cvar.PPKT_GLOBAL_ADDRESS
PPKT_RF_MEM_0_REGION = cvar.PPKT_RF_MEM_0_REGION
PPKT_RF_MEM_1_REGION = cvar.PPKT_RF_MEM_1_REGION
PPKT_RF_MEM_2_REGION = cvar.PPKT_RF_MEM_2_REGION
PPKT_RF_MEM_3_REGION = cvar.PPKT_RF_MEM_3_REGION
PPKT_TX_WAVEFORM_0_REGION = cvar.PPKT_TX_WAVEFORM_0_REGION
PPKT_TX_WAVEFORM_CONTROL_0_REGION = cvar.PPKT_TX_WAVEFORM_CONTROL_0_REGION
PPKT_TX_CODED_EXCITATION_0_REGION = cvar.PPKT_TX_CODED_EXCITATION_0_REGION
PPKT_TX_WAVEFORM_1_REGION = cvar.PPKT_TX_WAVEFORM_1_REGION
PPKT_TX_WAVEFORM_CONTROL_1_REGION = cvar.PPKT_TX_WAVEFORM_CONTROL_1_REGION
PPKT_TX_CODED_EXCITATION_1_REGION = cvar.PPKT_TX_CODED_EXCITATION_1_REGION
PPKT_TX_DELAY_MESH_CORNER_REGION = cvar.PPKT_TX_DELAY_MESH_CORNER_REGION
PPKT_TX_DELAY_MESH_REGION = cvar.PPKT_TX_DELAY_MESH_REGION
PPKT_RX_ANALOG_REGION = cvar.PPKT_RX_ANALOG_REGION
PPKT_RX_RECEIVE_REGION = cvar.PPKT_RX_RECEIVE_REGION
PPKT_SEQUENCER_REGION = cvar.PPKT_SEQUENCER_REGION
PPKT_TGC_REGION = cvar.PPKT_TGC_REGION
PPKT_DEBUG_REGION = cvar.PPKT_DEBUG_REGION
PPKT_TOP_CONTROL_REGION = cvar.PPKT_TOP_CONTROL_REGION
PPKT_TOP_STATUS_REGION = cvar.PPKT_TOP_STATUS_REGION
PPKT_SF_RESET_REGION = cvar.PPKT_SF_RESET_REGION
PPKT_SF_UNRESET_REGION = cvar.PPKT_SF_UNRESET_REGION
PPKT_SF_TRIGGER_REGION = cvar.PPKT_SF_TRIGGER_REGION
PPKT_SF_SET_ID_REGION = cvar.PPKT_SF_SET_ID_REGION
TGC_MEM_WIDTH = cvar.TGC_MEM_WIDTH
TGC_MEM_DEPTH = cvar.TGC_MEM_DEPTH
SHIFT_BITS_WIDTH = cvar.SHIFT_BITS_WIDTH
OFFLOAD_STRIDE_WIDTH = cvar.OFFLOAD_STRIDE_WIDTH
OFFLOAD_WPS_WIDTH = cvar.OFFLOAD_WPS_WIDTH
DECIMATION_FACTOR_WIDTH = cvar.DECIMATION_FACTOR_WIDTH
SEQUENCE_CNT_WIDTH = cvar.SEQUENCE_CNT_WIDTH
SEQUENCE_CLK_SHIFT_WIDTH = cvar.SEQUENCE_CLK_SHIFT_WIDTH
ppkt_header_t.Bits = _BniHardwareWrapper.cvar.ppkt_header_t_Bits
ppkt_header_t.Words = _BniHardwareWrapper.cvar.ppkt_header_t_Words

class Argument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Argument_Minimum
    Maximum = _BniHardwareWrapper.Argument_Maximum
    Bits = _BniHardwareWrapper.Argument_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Argument_swiginit(self, _BniHardwareWrapper.new_Argument(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Argument___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Argument___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Argument_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Argument_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Argument_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Argument_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Argument

# Register Argument in _BniHardwareWrapper:
_BniHardwareWrapper.Argument_swigregister(Argument)

class Interpreter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Interpreter_Minimum
    Maximum = _BniHardwareWrapper.Interpreter_Maximum
    Bits = _BniHardwareWrapper.Interpreter_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Interpreter_swiginit(self, _BniHardwareWrapper.new_Interpreter(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Interpreter___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Interpreter___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Interpreter_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Interpreter_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Interpreter_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Interpreter_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Interpreter

# Register Interpreter in _BniHardwareWrapper:
_BniHardwareWrapper.Interpreter_swigregister(Interpreter)

class Command(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.Command_Minimum
    Maximum = _BniHardwareWrapper.Command_Maximum
    Bits = _BniHardwareWrapper.Command_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.Command_swiginit(self, _BniHardwareWrapper.new_Command(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.Command___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.Command___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.Command_get(self)

    def set(self, value):
        return _BniHardwareWrapper.Command_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.Command_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.Command_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_Command

# Register Command in _BniHardwareWrapper:
_BniHardwareWrapper.Command_swigregister(Command)

class ModuleId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.ModuleId_Minimum
    Maximum = _BniHardwareWrapper.ModuleId_Maximum
    Bits = _BniHardwareWrapper.ModuleId_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.ModuleId_swiginit(self, _BniHardwareWrapper.new_ModuleId(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.ModuleId___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.ModuleId___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.ModuleId_get(self)

    def set(self, value):
        return _BniHardwareWrapper.ModuleId_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.ModuleId_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.ModuleId_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_ModuleId

# Register ModuleId in _BniHardwareWrapper:
_BniHardwareWrapper.ModuleId_swigregister(ModuleId)

class TopBottom(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.TopBottom_Minimum
    Maximum = _BniHardwareWrapper.TopBottom_Maximum
    Bits = _BniHardwareWrapper.TopBottom_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.TopBottom_swiginit(self, _BniHardwareWrapper.new_TopBottom(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.TopBottom___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.TopBottom___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.TopBottom_get(self)

    def set(self, value):
        return _BniHardwareWrapper.TopBottom_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.TopBottom_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.TopBottom_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_TopBottom

# Register TopBottom in _BniHardwareWrapper:
_BniHardwareWrapper.TopBottom_swigregister(TopBottom)

class OffloadGroups(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.OffloadGroups_Minimum
    Maximum = _BniHardwareWrapper.OffloadGroups_Maximum
    Bits = _BniHardwareWrapper.OffloadGroups_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.OffloadGroups_swiginit(self, _BniHardwareWrapper.new_OffloadGroups(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.OffloadGroups___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.OffloadGroups___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.OffloadGroups_get(self)

    def set(self, value):
        return _BniHardwareWrapper.OffloadGroups_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.OffloadGroups_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.OffloadGroups_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_OffloadGroups

# Register OffloadGroups in _BniHardwareWrapper:
_BniHardwareWrapper.OffloadGroups_swigregister(OffloadGroups)

class OffloadHeaderLength(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.OffloadHeaderLength_Minimum
    Maximum = _BniHardwareWrapper.OffloadHeaderLength_Maximum
    Bits = _BniHardwareWrapper.OffloadHeaderLength_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.OffloadHeaderLength_swiginit(self, _BniHardwareWrapper.new_OffloadHeaderLength(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.OffloadHeaderLength___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.OffloadHeaderLength___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.OffloadHeaderLength_get(self)

    def set(self, value):
        return _BniHardwareWrapper.OffloadHeaderLength_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.OffloadHeaderLength_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.OffloadHeaderLength_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_OffloadHeaderLength

# Register OffloadHeaderLength in _BniHardwareWrapper:
_BniHardwareWrapper.OffloadHeaderLength_swigregister(OffloadHeaderLength)

class DatapathOptionsNumAcquisitions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.DatapathOptionsNumAcquisitions_Minimum
    Maximum = _BniHardwareWrapper.DatapathOptionsNumAcquisitions_Maximum
    Bits = _BniHardwareWrapper.DatapathOptionsNumAcquisitions_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.DatapathOptionsNumAcquisitions_swiginit(self, _BniHardwareWrapper.new_DatapathOptionsNumAcquisitions(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.DatapathOptionsNumAcquisitions___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.DatapathOptionsNumAcquisitions___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.DatapathOptionsNumAcquisitions_get(self)

    def set(self, value):
        return _BniHardwareWrapper.DatapathOptionsNumAcquisitions_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.DatapathOptionsNumAcquisitions_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.DatapathOptionsNumAcquisitions_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_DatapathOptionsNumAcquisitions

# Register DatapathOptionsNumAcquisitions in _BniHardwareWrapper:
_BniHardwareWrapper.DatapathOptionsNumAcquisitions_swigregister(DatapathOptionsNumAcquisitions)

class DatapathOptionsFftPoints(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.DatapathOptionsFftPoints_Minimum
    Maximum = _BniHardwareWrapper.DatapathOptionsFftPoints_Maximum
    Bits = _BniHardwareWrapper.DatapathOptionsFftPoints_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.DatapathOptionsFftPoints_swiginit(self, _BniHardwareWrapper.new_DatapathOptionsFftPoints(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.DatapathOptionsFftPoints___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.DatapathOptionsFftPoints___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.DatapathOptionsFftPoints_get(self)

    def set(self, value):
        return _BniHardwareWrapper.DatapathOptionsFftPoints_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.DatapathOptionsFftPoints_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.DatapathOptionsFftPoints_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_DatapathOptionsFftPoints

# Register DatapathOptionsFftPoints in _BniHardwareWrapper:
_BniHardwareWrapper.DatapathOptionsFftPoints_swigregister(DatapathOptionsFftPoints)

class DatapathOptionsFftScale(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.DatapathOptionsFftScale_Minimum
    Maximum = _BniHardwareWrapper.DatapathOptionsFftScale_Maximum
    Bits = _BniHardwareWrapper.DatapathOptionsFftScale_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.DatapathOptionsFftScale_swiginit(self, _BniHardwareWrapper.new_DatapathOptionsFftScale(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.DatapathOptionsFftScale___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.DatapathOptionsFftScale___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.DatapathOptionsFftScale_get(self)

    def set(self, value):
        return _BniHardwareWrapper.DatapathOptionsFftScale_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.DatapathOptionsFftScale_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.DatapathOptionsFftScale_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_DatapathOptionsFftScale

# Register DatapathOptionsFftScale in _BniHardwareWrapper:
_BniHardwareWrapper.DatapathOptionsFftScale_swigregister(DatapathOptionsFftScale)

class DatapathOptionsBitWidth(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.DatapathOptionsBitWidth_Minimum
    Maximum = _BniHardwareWrapper.DatapathOptionsBitWidth_Maximum
    Bits = _BniHardwareWrapper.DatapathOptionsBitWidth_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.DatapathOptionsBitWidth_swiginit(self, _BniHardwareWrapper.new_DatapathOptionsBitWidth(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.DatapathOptionsBitWidth___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.DatapathOptionsBitWidth___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.DatapathOptionsBitWidth_get(self)

    def set(self, value):
        return _BniHardwareWrapper.DatapathOptionsBitWidth_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.DatapathOptionsBitWidth_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.DatapathOptionsBitWidth_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_DatapathOptionsBitWidth

# Register DatapathOptionsBitWidth in _BniHardwareWrapper:
_BniHardwareWrapper.DatapathOptionsBitWidth_swigregister(DatapathOptionsBitWidth)

class ColumnSumNumPackets(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.ColumnSumNumPackets_Minimum
    Maximum = _BniHardwareWrapper.ColumnSumNumPackets_Maximum
    Bits = _BniHardwareWrapper.ColumnSumNumPackets_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.ColumnSumNumPackets_swiginit(self, _BniHardwareWrapper.new_ColumnSumNumPackets(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.ColumnSumNumPackets___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.ColumnSumNumPackets___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.ColumnSumNumPackets_get(self)

    def set(self, value):
        return _BniHardwareWrapper.ColumnSumNumPackets_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.ColumnSumNumPackets_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.ColumnSumNumPackets_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_ColumnSumNumPackets

# Register ColumnSumNumPackets in _BniHardwareWrapper:
_BniHardwareWrapper.ColumnSumNumPackets_swigregister(ColumnSumNumPackets)

class ParameterLoaderHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.ParameterLoaderHandler_Minimum
    Maximum = _BniHardwareWrapper.ParameterLoaderHandler_Maximum
    Bits = _BniHardwareWrapper.ParameterLoaderHandler_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.ParameterLoaderHandler_swiginit(self, _BniHardwareWrapper.new_ParameterLoaderHandler(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.ParameterLoaderHandler___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.ParameterLoaderHandler___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.ParameterLoaderHandler_get(self)

    def set(self, value):
        return _BniHardwareWrapper.ParameterLoaderHandler_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.ParameterLoaderHandler_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.ParameterLoaderHandler_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_ParameterLoaderHandler

# Register ParameterLoaderHandler in _BniHardwareWrapper:
_BniHardwareWrapper.ParameterLoaderHandler_swigregister(ParameterLoaderHandler)

class ParameterLoaderWords(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.ParameterLoaderWords_Minimum
    Maximum = _BniHardwareWrapper.ParameterLoaderWords_Maximum
    Bits = _BniHardwareWrapper.ParameterLoaderWords_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.ParameterLoaderWords_swiginit(self, _BniHardwareWrapper.new_ParameterLoaderWords(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.ParameterLoaderWords___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.ParameterLoaderWords___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.ParameterLoaderWords_get(self)

    def set(self, value):
        return _BniHardwareWrapper.ParameterLoaderWords_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.ParameterLoaderWords_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.ParameterLoaderWords_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_ParameterLoaderWords

# Register ParameterLoaderWords in _BniHardwareWrapper:
_BniHardwareWrapper.ParameterLoaderWords_swigregister(ParameterLoaderWords)

class ParameterLoaderGroups(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.ParameterLoaderGroups_Minimum
    Maximum = _BniHardwareWrapper.ParameterLoaderGroups_Maximum
    Bits = _BniHardwareWrapper.ParameterLoaderGroups_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.ParameterLoaderGroups_swiginit(self, _BniHardwareWrapper.new_ParameterLoaderGroups(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.ParameterLoaderGroups___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.ParameterLoaderGroups___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.ParameterLoaderGroups_get(self)

    def set(self, value):
        return _BniHardwareWrapper.ParameterLoaderGroups_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.ParameterLoaderGroups_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.ParameterLoaderGroups_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_ParameterLoaderGroups

# Register ParameterLoaderGroups in _BniHardwareWrapper:
_BniHardwareWrapper.ParameterLoaderGroups_swigregister(ParameterLoaderGroups)

class ParameterLoaderAddress(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minimum = _BniHardwareWrapper.ParameterLoaderAddress_Minimum
    Maximum = _BniHardwareWrapper.ParameterLoaderAddress_Maximum
    Bits = _BniHardwareWrapper.ParameterLoaderAddress_Bits

    def __init__(self, *args):
        _BniHardwareWrapper.ParameterLoaderAddress_swiginit(self, _BniHardwareWrapper.new_ParameterLoaderAddress(*args))

    def __iadd__(self, value):
        return _BniHardwareWrapper.ParameterLoaderAddress___iadd__(self, value)

    def __isub__(self, value):
        return _BniHardwareWrapper.ParameterLoaderAddress___isub__(self, value)

    def get(self):
        return _BniHardwareWrapper.ParameterLoaderAddress_get(self)

    def set(self, value):
        return _BniHardwareWrapper.ParameterLoaderAddress_set(self, value)

    def toRaw(self):
        return _BniHardwareWrapper.ParameterLoaderAddress_toRaw(self)

    def fromRaw(self, raw):
        return _BniHardwareWrapper.ParameterLoaderAddress_fromRaw(self, raw)
    __swig_destroy__ = _BniHardwareWrapper.delete_ParameterLoaderAddress

# Register ParameterLoaderAddress in _BniHardwareWrapper:
_BniHardwareWrapper.ParameterLoaderAddress_swigregister(ParameterLoaderAddress)


def packBasicLoadRecord(interpreter, command, argument):
    return _BniHardwareWrapper.packBasicLoadRecord(interpreter, command, argument)

def getInterpreter(loadrecord):
    return _BniHardwareWrapper.getInterpreter(loadrecord)

def getCommand(loadrecord):
    return _BniHardwareWrapper.getCommand(loadrecord)

def getArgument(loadrecord):
    return _BniHardwareWrapper.getArgument(loadrecord)

def makeSetModule(topbot, startModule, endModule):
    return _BniHardwareWrapper.makeSetModule(topbot, startModule, endModule)

def makeSetParamLaunchTime(time):
    return _BniHardwareWrapper.makeSetParamLaunchTime(time)

def makeSetTriggerLaunch(time):
    return _BniHardwareWrapper.makeSetTriggerLaunch(time)

def makeSetSeqTimeCounterReset(time):
    return _BniHardwareWrapper.makeSetSeqTimeCounterReset(time)

def makeSetTimeRead48Launch(time):
    return _BniHardwareWrapper.makeSetTimeRead48Launch(time)

def makeSetParamloadSwitch(time):
    return _BniHardwareWrapper.makeSetParamloadSwitch(time)

def makeSetParamloadTimeout(time):
    return _BniHardwareWrapper.makeSetParamloadTimeout(time)

def makeSetTimeExtend(enable):
    return _BniHardwareWrapper.makeSetTimeExtend(enable)

def makeSetOffload(offloadPath, offloadGroups, startModule, endModule):
    return _BniHardwareWrapper.makeSetOffload(offloadPath, offloadGroups, startModule, endModule)

def makeSetDatapathOptions(numAcquisitions, fftScale, ifftScale, fftPoints, summerBypass, multi2Bypass, fftBypass, ifftBypass, multi1Bypass, preprocDecBypass, bitWidth, packed):
    return _BniHardwareWrapper.makeSetDatapathOptions(numAcquisitions, fftScale, ifftScale, fftPoints, summerBypass, multi2Bypass, fftBypass, ifftBypass, multi1Bypass, preprocDecBypass, bitWidth, packed)

def makeSetMoreDatapathOptions(decimation, numPackets, bAdderInputTwoSelect, bAdderInputOneSelect, aAdderInputTwoSelect, aAdderInputOneSelect):
    return _BniHardwareWrapper.makeSetMoreDatapathOptions(decimation, numPackets, bAdderInputTwoSelect, bAdderInputOneSelect, aAdderInputTwoSelect, aAdderInputOneSelect)

def makeSetHemisphereDisable(expectedRead48, txBotDisable, txTopDisable, rxBotDisable, rxTopDisable):
    return _BniHardwareWrapper.makeSetHemisphereDisable(expectedRead48, txBotDisable, txTopDisable, rxBotDisable, rxTopDisable)

def makeSetOffloadLength(length):
    return _BniHardwareWrapper.makeSetOffloadLength(length)

def makeSetOffloadHeaderLength(length):
    return _BniHardwareWrapper.makeSetOffloadHeaderLength(length)

def makeSetOffloadHeaderLiteral(header):
    return _BniHardwareWrapper.makeSetOffloadHeaderLiteral(header)

def makeSetOffloadHeaderSpuStack():
    return _BniHardwareWrapper.makeSetOffloadHeaderSpuStack()

def makeNoop():
    return _BniHardwareWrapper.makeNoop()

def makeSetLoop(iterations):
    return _BniHardwareWrapper.makeSetLoop(iterations)

def makeReturn():
    return _BniHardwareWrapper.makeReturn()

def makeGosub(address):
    return _BniHardwareWrapper.makeGosub(address)

def makeLoadComplete():
    return _BniHardwareWrapper.makeLoadComplete()

def isGosubCommand(loadrecord):
    return _BniHardwareWrapper.isGosubCommand(loadrecord)

def offsetGosubAddress(loadrecord, offset):
    return _BniHardwareWrapper.offsetGosubAddress(loadrecord, offset)

def packParameterLoaderCommand(handler, multicast, repeat):
    return _BniHardwareWrapper.packParameterLoaderCommand(handler, multicast, repeat)

def packParameterLoaderArgument(numWords, groupNumber, paramMemoryOffset):
    return _BniHardwareWrapper.packParameterLoaderArgument(numWords, groupNumber, paramMemoryOffset)

def makeParameterLoader(handler, multicast, repeat, numWords, groupNumber, paramMemoryOffset):
    return _BniHardwareWrapper.makeParameterLoader(handler, multicast, repeat, numWords, groupNumber, paramMemoryOffset)

def isParameterLoaderCommand(loadrecord):
    return _BniHardwareWrapper.isParameterLoaderCommand(loadrecord)

def offsetParameterLoaderAddress(loadrecord, offset):
    return _BniHardwareWrapper.offsetParameterLoaderAddress(loadrecord, offset)
class IPower(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, power):
        _BniHardwareWrapper.IPower_swiginit(self, _BniHardwareWrapper.new_IPower(power))

    def setVoltage(self, supply, voltage):
        return _BniHardwareWrapper.IPower_setVoltage(self, supply, voltage)

    def getVoltage(self, supply):
        return _BniHardwareWrapper.IPower_getVoltage(self, supply)

    def getVoltageCommand(self, supply):
        return _BniHardwareWrapper.IPower_getVoltageCommand(self, supply)

    def getCurrent(self, supply):
        return _BniHardwareWrapper.IPower_getCurrent(self, supply)

    def enable(self, *args):
        return _BniHardwareWrapper.IPower_enable(self, *args)

    def disable(self, *args):
        return _BniHardwareWrapper.IPower_disable(self, *args)

    def isEnabled(self, *args):
        return _BniHardwareWrapper.IPower_isEnabled(self, *args)

    def reset(self):
        return _BniHardwareWrapper.IPower_reset(self)

    def logStatus(self, verbose=False):
        return _BniHardwareWrapper.IPower_logStatus(self, verbose)

    def faultLogEnable(self):
        return _BniHardwareWrapper.IPower_faultLogEnable(self)

    def faultLogClear(self, waitForCompletion=True):
        return _BniHardwareWrapper.IPower_faultLogClear(self, waitForCompletion)

    def faultLogCheck(self):
        return _BniHardwareWrapper.IPower_faultLogCheck(self)

    def faultLogGet(self, storedLog, summaryOnly):
        return _BniHardwareWrapper.IPower_faultLogGet(self, storedLog, summaryOnly)

    def initialize(self):
        return _BniHardwareWrapper.IPower_initialize(self)

    def masterEnable(self):
        return _BniHardwareWrapper.IPower_masterEnable(self)

    def masterDisable(self):
        return _BniHardwareWrapper.IPower_masterDisable(self)

    def getBoardComponentNumber(self):
        return _BniHardwareWrapper.IPower_getBoardComponentNumber(self)

    def setBoardComponentNumber(self, componentNumber):
        return _BniHardwareWrapper.IPower_setBoardComponentNumber(self, componentNumber)

    def getBoardNumber(self):
        return _BniHardwareWrapper.IPower_getBoardNumber(self)

    def getBoardRevision(self):
        return _BniHardwareWrapper.IPower_getBoardRevision(self)

    def getFirmwareVersion(self):
        return _BniHardwareWrapper.IPower_getFirmwareVersion(self)

    def getBoardBomNumber(self):
        return _BniHardwareWrapper.IPower_getBoardBomNumber(self)

    def getUniqueIdNumber(self):
        return _BniHardwareWrapper.IPower_getUniqueIdNumber(self)

    def getBoardSerialNumber(self):
        return _BniHardwareWrapper.IPower_getBoardSerialNumber(self)

    def setBoardSerialNumber(self, serialNumber):
        return _BniHardwareWrapper.IPower_setBoardSerialNumber(self, serialNumber)

    def getManufacturer(self):
        return _BniHardwareWrapper.IPower_getManufacturer(self)

    def getYearOfManufacturing(self):
        return _BniHardwareWrapper.IPower_getYearOfManufacturing(self)

    def getWeekOfManufacturing(self):
        return _BniHardwareWrapper.IPower_getWeekOfManufacturing(self)

    def getTemperature(self):
        return _BniHardwareWrapper.IPower_getTemperature(self)

    def setForceFastCharge(self, enable):
        return _BniHardwareWrapper.IPower_setForceFastCharge(self, enable)

    def getVBIASPolarity(self):
        return _BniHardwareWrapper.IPower_getVBIASPolarity(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_IPower

# Register IPower in _BniHardwareWrapper:
_BniHardwareWrapper.IPower_swigregister(IPower)
RtlInterpreter = cvar.RtlInterpreter
SpuInterpreter = cvar.SpuInterpreter
InterpreterBitmask = cvar.InterpreterBitmask
InterpreterBitshift = cvar.InterpreterBitshift
SetModuleTopBotBitmask = cvar.SetModuleTopBotBitmask
SetModuleTopBotBitshift = cvar.SetModuleTopBotBitshift
SetModuleModuleBitmask = cvar.SetModuleModuleBitmask
SetModuleStartModuleBitshift = cvar.SetModuleStartModuleBitshift
LoadRecordCommandBitmask = cvar.LoadRecordCommandBitmask
LoadRecordCommandBitshift = cvar.LoadRecordCommandBitshift
LoadRecordArgumentBitmask = cvar.LoadRecordArgumentBitmask
LoadRecordArgumentBitshift = cvar.LoadRecordArgumentBitshift
OffloadGroupsBitmask = cvar.OffloadGroupsBitmask
OffloadGroupsBitshift = cvar.OffloadGroupsBitshift
OffloadPathBitshift = cvar.OffloadPathBitshift
DatapathOptionsNumAcquisitionsBitMask = cvar.DatapathOptionsNumAcquisitionsBitMask
DatapathOptionsNumAcquisitionsBitShift = cvar.DatapathOptionsNumAcquisitionsBitShift
DatapathOptionsFftPointsBitMask = cvar.DatapathOptionsFftPointsBitMask
DatapathOptionsFftPointsBitShift = cvar.DatapathOptionsFftPointsBitShift
DatapathOptionsFftScaleBitMask = cvar.DatapathOptionsFftScaleBitMask
DatapathOptionsFftScaleBitShift = cvar.DatapathOptionsFftScaleBitShift
DatapathOptionsIfftScaleBitShift = cvar.DatapathOptionsIfftScaleBitShift
DatapathOptionsSummerBypassBitShift = cvar.DatapathOptionsSummerBypassBitShift
DatapathOptionsMulti2BypassBitShift = cvar.DatapathOptionsMulti2BypassBitShift
DatapathOptionsFftBypassBitShift = cvar.DatapathOptionsFftBypassBitShift
DatapathOptionsIfftBypassBitShift = cvar.DatapathOptionsIfftBypassBitShift
DatapathOptionsPreprocDecBypassBitShift = cvar.DatapathOptionsPreprocDecBypassBitShift
DatapathOptionsMulti1BypassBitShift = cvar.DatapathOptionsMulti1BypassBitShift
DatapathOptionsBitWidthBitMask = cvar.DatapathOptionsBitWidthBitMask
DatapathOptionsBitWidthBitShift = cvar.DatapathOptionsBitWidthBitShift
OffloadHeaderLiteralBitShift = cvar.OffloadHeaderLiteralBitShift
DecimationBitShift = cvar.DecimationBitShift
NumPacketsToSumBitShift = cvar.NumPacketsToSumBitShift
BAdderInputTwoBitShift = cvar.BAdderInputTwoBitShift
BAdderInputOneBitShift = cvar.BAdderInputOneBitShift
AAdderInputTwoBitShift = cvar.AAdderInputTwoBitShift
HandlerBitmask = cvar.HandlerBitmask
HandlerBitshift = cvar.HandlerBitshift
MulticastBitmask = cvar.MulticastBitmask
MulticastBitshift = cvar.MulticastBitshift
RepeatBitmask = cvar.RepeatBitmask
NumWordsBitmask = cvar.NumWordsBitmask
NumWordsBitshift = cvar.NumWordsBitshift
GroupNumBitmask = cvar.GroupNumBitmask
GroupNumBitshift = cvar.GroupNumBitshift
ParamMemOffsetBitmask = cvar.ParamMemOffsetBitmask
ParamMemOffsetBitShift = cvar.ParamMemOffsetBitShift
SetModule = cvar.SetModule
SetParamLaunch = cvar.SetParamLaunch
SetTriggerLaunch = cvar.SetTriggerLaunch
SetSeqtimeCounterReset = cvar.SetSeqtimeCounterReset
SetTimeRead48Launch = cvar.SetTimeRead48Launch
SetParamLoadSwitch = cvar.SetParamLoadSwitch
SetParamLoadTimeout = cvar.SetParamLoadTimeout
SetTimeExtended = cvar.SetTimeExtended
SetOffload = cvar.SetOffload
SetDataPathOptions = cvar.SetDataPathOptions
SetHemisphereDisable = cvar.SetHemisphereDisable
SetMoreDataPathOptions = cvar.SetMoreDataPathOptions
SetOffloadLength = cvar.SetOffloadLength
SetOffloadHeaderLength = cvar.SetOffloadHeaderLength
SetOffloadHeader = cvar.SetOffloadHeader
NoOp = cvar.NoOp
SetLoop = cvar.SetLoop
Return = cvar.Return
GoSub = cvar.GoSub
LoadComplete = cvar.LoadComplete

class IPowerProfile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BniHardwareWrapper.delete_IPowerProfile

    def disconnect(self):
        return _BniHardwareWrapper.IPowerProfile_disconnect(self)

    def isProfileValid(self):
        return _BniHardwareWrapper.IPowerProfile_isProfileValid(self)

    def getProfile(self):
        return _BniHardwareWrapper.IPowerProfile_getProfile(self)

    def setProfile(self, profile):
        return _BniHardwareWrapper.IPowerProfile_setProfile(self, profile)

    def getProfiles(self):
        return _BniHardwareWrapper.IPowerProfile_getProfiles(self)

# Register IPowerProfile in _BniHardwareWrapper:
_BniHardwareWrapper.IPowerProfile_swigregister(IPowerProfile)

class SequenceDataHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def makeSequenceDataHeader():
        return _BniHardwareWrapper.SequenceDataHeader_makeSequenceDataHeader()

    def pack(self):
        return _BniHardwareWrapper.SequenceDataHeader_pack(self)

    def packToBuffer(self, buffer):
        return _BniHardwareWrapper.SequenceDataHeader_packToBuffer(self, buffer)

    def unpackFromBuffer(self, buffer):
        return _BniHardwareWrapper.SequenceDataHeader_unpackFromBuffer(self, buffer)

    def size(self):
        return _BniHardwareWrapper.SequenceDataHeader_size(self)

    def createPacker(self):
        return _BniHardwareWrapper.SequenceDataHeader_createPacker(self)

    def unpack(self, buffer, size):
        return _BniHardwareWrapper.SequenceDataHeader_unpack(self, buffer, size)

    def resetUnpack(self):
        return _BniHardwareWrapper.SequenceDataHeader_resetUnpack(self)
    Id = property(_BniHardwareWrapper.SequenceDataHeader_Id_get, _BniHardwareWrapper.SequenceDataHeader_Id_set)
    TransmitIndex = property(_BniHardwareWrapper.SequenceDataHeader_TransmitIndex_get, _BniHardwareWrapper.SequenceDataHeader_TransmitIndex_set)
    TransmitSubindex = property(_BniHardwareWrapper.SequenceDataHeader_TransmitSubindex_get, _BniHardwareWrapper.SequenceDataHeader_TransmitSubindex_set)
    FrameIndex = property(_BniHardwareWrapper.SequenceDataHeader_FrameIndex_get, _BniHardwareWrapper.SequenceDataHeader_FrameIndex_set)
    TimestampLow = property(_BniHardwareWrapper.SequenceDataHeader_TimestampLow_get, _BniHardwareWrapper.SequenceDataHeader_TimestampLow_set)
    TimestampHigh = property(_BniHardwareWrapper.SequenceDataHeader_TimestampHigh_get, _BniHardwareWrapper.SequenceDataHeader_TimestampHigh_set)
    TimerFrequency = property(_BniHardwareWrapper.SequenceDataHeader_TimerFrequency_get, _BniHardwareWrapper.SequenceDataHeader_TimerFrequency_set)
    DiscardFlag = property(_BniHardwareWrapper.SequenceDataHeader_DiscardFlag_get, _BniHardwareWrapper.SequenceDataHeader_DiscardFlag_set)
    NoiseSubFlag = property(_BniHardwareWrapper.SequenceDataHeader_NoiseSubFlag_get, _BniHardwareWrapper.SequenceDataHeader_NoiseSubFlag_set)

    def getTimestampInSeconds(self):
        return _BniHardwareWrapper.SequenceDataHeader_getTimestampInSeconds(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_SequenceDataHeader

# Register SequenceDataHeader in _BniHardwareWrapper:
_BniHardwareWrapper.SequenceDataHeader_swigregister(SequenceDataHeader)

def SequenceDataHeader_makeSequenceDataHeader():
    return _BniHardwareWrapper.SequenceDataHeader_makeSequenceDataHeader()


def __lshift__(os, a):
    return _BniHardwareWrapper.__lshift__(os, a)
class SemanticVersion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BniHardwareWrapper.SemanticVersion_swiginit(self, _BniHardwareWrapper.new_SemanticVersion(*args))

    def hasPreReleaseTag(self):
        return _BniHardwareWrapper.SemanticVersion_hasPreReleaseTag(self)

    def hasBuildMetadataTag(self):
        return _BniHardwareWrapper.SemanticVersion_hasBuildMetadataTag(self)

    def getMajorVersion(self):
        return _BniHardwareWrapper.SemanticVersion_getMajorVersion(self)

    def getMinorVersion(self):
        return _BniHardwareWrapper.SemanticVersion_getMinorVersion(self)

    def getPatchVersion(self):
        return _BniHardwareWrapper.SemanticVersion_getPatchVersion(self)

    def getPreReleaseTag(self):
        return _BniHardwareWrapper.SemanticVersion_getPreReleaseTag(self)

    def getBuildMetadataTag(self):
        return _BniHardwareWrapper.SemanticVersion_getBuildMetadataTag(self)

    def __eq__(self, other):
        return _BniHardwareWrapper.SemanticVersion___eq__(self, other)

    def __lt__(self, other):
        return _BniHardwareWrapper.SemanticVersion___lt__(self, other)

    def toString(self):
        return _BniHardwareWrapper.SemanticVersion_toString(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_SemanticVersion

# Register SemanticVersion in _BniHardwareWrapper:
_BniHardwareWrapper.SemanticVersion_swigregister(SemanticVersion)
SemanticVersion.Version = _BniHardwareWrapper.cvar.SemanticVersion_Version


def __rshift__(_in, version):
    return _BniHardwareWrapper.__rshift__(_in, version)
class BniFpgaImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, path, hwVersion):
        _BniHardwareWrapper.BniFpgaImage_swiginit(self, _BniHardwareWrapper.new_BniFpgaImage(path, hwVersion))

    def getHwVersion(self):
        return _BniHardwareWrapper.BniFpgaImage_getHwVersion(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_BniFpgaImage

# Register BniFpgaImage in _BniHardwareWrapper:
_BniHardwareWrapper.BniFpgaImage_swigregister(BniFpgaImage)

class BniFx3Image(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, path, version, type):
        _BniHardwareWrapper.BniFx3Image_swiginit(self, _BniHardwareWrapper.new_BniFx3Image(path, version, type))

    def getVersion(self):
        return _BniHardwareWrapper.BniFx3Image_getVersion(self)

    def getType(self):
        return _BniHardwareWrapper.BniFx3Image_getType(self)

    def getCrc(self):
        return _BniHardwareWrapper.BniFx3Image_getCrc(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_BniFx3Image

# Register BniFx3Image in _BniHardwareWrapper:
_BniHardwareWrapper.BniFx3Image_swigregister(BniFx3Image)

class BniPowerImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, path, boardAssembly, swVersion, boardId):
        _BniHardwareWrapper.BniPowerImage_swiginit(self, _BniHardwareWrapper.new_BniPowerImage(path, boardAssembly, swVersion, boardId))

    def getBoardAssembly(self):
        return _BniHardwareWrapper.BniPowerImage_getBoardAssembly(self)

    def getBoardId(self):
        return _BniHardwareWrapper.BniPowerImage_getBoardId(self)

    def getSwVersion(self):
        return _BniHardwareWrapper.BniPowerImage_getSwVersion(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_BniPowerImage

# Register BniPowerImage in _BniHardwareWrapper:
_BniHardwareWrapper.BniPowerImage_swigregister(BniPowerImage)

class BniProbeImages(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fx3BootImage, fx3Image, fpgaImage, powerImage):
        _BniHardwareWrapper.BniProbeImages_swiginit(self, _BniHardwareWrapper.new_BniProbeImages(fx3BootImage, fx3Image, fpgaImage, powerImage))

    def getFx3BootImage(self):
        return _BniHardwareWrapper.BniProbeImages_getFx3BootImage(self)

    def getFx3Image(self):
        return _BniHardwareWrapper.BniProbeImages_getFx3Image(self)

    def getFpgaImage(self):
        return _BniHardwareWrapper.BniProbeImages_getFpgaImage(self)

    def getPowerImage(self):
        return _BniHardwareWrapper.BniProbeImages_getPowerImage(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_BniProbeImages

# Register BniProbeImages in _BniHardwareWrapper:
_BniHardwareWrapper.BniProbeImages_swigregister(BniProbeImages)

class BniProbeFirmwareRepo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BniHardwareWrapper.delete_BniProbeFirmwareRepo

    def getProbeImages(self):
        return _BniHardwareWrapper.BniProbeFirmwareRepo_getProbeImages(self)

# Register BniProbeFirmwareRepo in _BniHardwareWrapper:
_BniHardwareWrapper.BniProbeFirmwareRepo_swigregister(BniProbeFirmwareRepo)

class BasicBniProbeFirmwareRepo(BniProbeFirmwareRepo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, images):
        _BniHardwareWrapper.BasicBniProbeFirmwareRepo_swiginit(self, _BniHardwareWrapper.new_BasicBniProbeFirmwareRepo(images))

    def getProbeImages(self):
        return _BniHardwareWrapper.BasicBniProbeFirmwareRepo_getProbeImages(self)
    __swig_destroy__ = _BniHardwareWrapper.delete_BasicBniProbeFirmwareRepo

# Register BasicBniProbeFirmwareRepo in _BniHardwareWrapper:
_BniHardwareWrapper.BasicBniProbeFirmwareRepo_swigregister(BasicBniProbeFirmwareRepo)

Fx3FirmwareType_BootloaderImage = _BniHardwareWrapper.Fx3FirmwareType_BootloaderImage
Fx3FirmwareType_ProductionImage = _BniHardwareWrapper.Fx3FirmwareType_ProductionImage

def MakeBoardComponentIdentificationNumber(boardComponentNumber, boardNumber, boardRevision, boardBomVersion):
    return _BniHardwareWrapper.MakeBoardComponentIdentificationNumber(boardComponentNumber, boardNumber, boardRevision, boardBomVersion)
class BoardComponentNumberFields(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    boardComponentNumber = property(_BniHardwareWrapper.BoardComponentNumberFields_boardComponentNumber_get, _BniHardwareWrapper.BoardComponentNumberFields_boardComponentNumber_set)
    boardNumber = property(_BniHardwareWrapper.BoardComponentNumberFields_boardNumber_get, _BniHardwareWrapper.BoardComponentNumberFields_boardNumber_set)
    boardRevision = property(_BniHardwareWrapper.BoardComponentNumberFields_boardRevision_get, _BniHardwareWrapper.BoardComponentNumberFields_boardRevision_set)
    boardBomVersion = property(_BniHardwareWrapper.BoardComponentNumberFields_boardBomVersion_get, _BniHardwareWrapper.BoardComponentNumberFields_boardBomVersion_set)

    def __init__(self):
        _BniHardwareWrapper.BoardComponentNumberFields_swiginit(self, _BniHardwareWrapper.new_BoardComponentNumberFields())
    __swig_destroy__ = _BniHardwareWrapper.delete_BoardComponentNumberFields

# Register BoardComponentNumberFields in _BniHardwareWrapper:
_BniHardwareWrapper.BoardComponentNumberFields_swigregister(BoardComponentNumberFields)

class BoardSerialNumberFields(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    boardManufacturer = property(_BniHardwareWrapper.BoardSerialNumberFields_boardManufacturer_get, _BniHardwareWrapper.BoardSerialNumberFields_boardManufacturer_set)
    boardYearOfManufacturing = property(_BniHardwareWrapper.BoardSerialNumberFields_boardYearOfManufacturing_get, _BniHardwareWrapper.BoardSerialNumberFields_boardYearOfManufacturing_set)
    boardWeekOfManufacturing = property(_BniHardwareWrapper.BoardSerialNumberFields_boardWeekOfManufacturing_get, _BniHardwareWrapper.BoardSerialNumberFields_boardWeekOfManufacturing_set)
    boardUniqueIdNumber = property(_BniHardwareWrapper.BoardSerialNumberFields_boardUniqueIdNumber_get, _BniHardwareWrapper.BoardSerialNumberFields_boardUniqueIdNumber_set)

    def __init__(self):
        _BniHardwareWrapper.BoardSerialNumberFields_swiginit(self, _BniHardwareWrapper.new_BoardSerialNumberFields())
    __swig_destroy__ = _BniHardwareWrapper.delete_BoardSerialNumberFields

# Register BoardSerialNumberFields in _BniHardwareWrapper:
_BniHardwareWrapper.BoardSerialNumberFields_swigregister(BoardSerialNumberFields)


def GetBoardComponentNumberFieldsFromBoardComponentIdentificationNumber(componentNumber):
    return _BniHardwareWrapper.GetBoardComponentNumberFieldsFromBoardComponentIdentificationNumber(componentNumber)

def GetBoardSerialNumberFieldsFromBoardSerialNumber(serialNumber):
    return _BniHardwareWrapper.GetBoardSerialNumberFieldsFromBoardSerialNumber(serialNumber)

def verifySerialNumber(serialNumber):
    return _BniHardwareWrapper.verifySerialNumber(serialNumber)

def verifyVersionNumber(assemblyVersionNumber):
    return _BniHardwareWrapper.verifyVersionNumber(assemblyVersionNumber)


